[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Téncicas Matemáticas en Bioinformática",
    "section": "",
    "text": "Prefacio\n¡Bienvenido al manual de Bioinformática!\nEste libro presenta una recopilación técnicas matemáticas y estadísticas aplicadas en Bioinformática. Muchas de estas técnicas están ilustradas con ejemplos y están implementadas en distintos lenguajes de programación como R, Python o Julia."
  },
  {
    "objectID": "index.html#capítulos",
    "href": "index.html#capítulos",
    "title": "Téncicas Matemáticas en Bioinformática",
    "section": "Capítulos",
    "text": "Capítulos\n\n\n\n\n\n\n\nAnálisis de expresión génica diferencial (RNA-Seq)\n\n\n\n\n\n\n\n\n\n\nDiagramas de volcán\n\n\n\n\n\n\n\nNo hay resultados"
  },
  {
    "objectID": "index.html#licencia",
    "href": "index.html#licencia",
    "title": "Téncicas Matemáticas en Bioinformática",
    "section": "Licencia",
    "text": "Licencia\nEsta obra está bajo una licencia Reconocimiento – No comercial – Compartir bajo la misma licencia 3.0 España de Creative Commons. Para ver una copia de esta licencia, visite https://creativecommons.org/licenses/by-nc-sa/3.0/es/.\nCon esta licencia eres libre de:\n\nCopiar, distribuir y mostrar este trabajo.\nRealizar modificaciones de este trabajo.\n\nBajo las siguientes condiciones:\n\nReconocimiento. Debe reconocer los créditos de la obra de la manera especificada por el autor o el licenciador (pero no de una manera que sugiera que tiene su apoyo o apoyan el uso que hace de su obra).\nNo comercial. No puede utilizar esta obra para fines comerciales.\nCompartir bajo la misma licencia. Si altera o transforma esta obra, o genera una obra derivada, sólo puede distribuir la obra generada bajo una licencia idéntica a ésta.\n\nAl reutilizar o distribuir la obra, tiene que dejar bien claro los términos de la licencia de esta obra.\nEstas condiciones pueden no aplicarse si se obtiene el permiso del titular de los derechos de autor.\nNada en esta licencia menoscaba o restringe los derechos morales del autor."
  },
  {
    "objectID": "01-rna-seq.html#análisis-de-expresión-génica-diferencial-con-edger",
    "href": "01-rna-seq.html#análisis-de-expresión-génica-diferencial-con-edger",
    "title": "1  Análisis de expresión génica diferencial (RNA-Seq)",
    "section": "1.1 Análisis de expresión génica diferencial con edgeR",
    "text": "1.1 Análisis de expresión génica diferencial con edgeR\nEl paquete edgeR es uno de los principales paquetes usados para el análisis de expresión génica diferencial que incorpora funciones para todas las etapas del análisis estadístico. Está disponible en el repositorio Bioconductor.\nA continuación se explica cómo realizar las distintas etapas del análisis estadístico con este paquete.\n\n1.1.1 Estructura de datos\nEl análisis estadístico comienza siempre a partir de la matriz con las frecuencias o conteos de expresión de cada gen en el conjunto de muestras analizadas. Las filas de esta matriz corresponden a los genes observados y las columnas a las muestras analizadas.\n\nEjemplo 1.1 A continuación se muestran las primeras filas de una matriz de frecuencias de expresión génica. Cada casilla recoge el número de veces que el gen de la fila correspondiente se ha observado en la muestra de la columna correspondiente.\n\n\n\n\n\n\n  \n    \n    \n      \n      sample1\n      sample2\n      sample3\n      sample4\n      sample5\n      sample6\n    \n  \n  \n    gene1\n85\n76\n103\n107\n140\n124\n    gene2\n1\n6\n11\n6\n1\n4\n    gene3\n80\n98\n39\n82\n97\n113\n    gene4\n92\n83\n59\n85\n100\n98\n    gene5\n36\n24\n18\n50\n22\n15\n    gene6\n0\n0\n1\n4\n2\n3\n  \n  \n  \n\n\n\n\n\nEl paquete EdgeR utiliza la estructura de datos DGEList para guardar la matriz de frecuencias de expresión génica. Para crear esta estructura se utiliza la función\n\nDGEList(frec, group = grupo): Crea una estructura del tipo DGEList con la matriz de frecuencias de expresión génica frec (con genes en filas y muestras en columnas) y el vector grupo con los grupos experimentales a los que pertenecen las muestras analizadas en las columnas de la matriz de frecuencias.\n\n\nlibrary(edgeR)\nlibrary(DEFormats)\nfrec &lt;- simulateRnaSeqData()\ngrupo &lt;- rep(c(\"A\", \"B\"), each = 3)\ndge &lt;- DGEList(frec, group = grupo)\ndge\n\nAn object of class \"DGEList\"\n$counts\n      sample1 sample2 sample3 sample4 sample5 sample6\ngene1      85      76     103     107     140     124\ngene2       1       6      11       6       1       4\ngene3      80      98      39      82      97     113\ngene4      92      83      59      85     100      98\ngene5      36      24      18      50      22      15\n995 more rows ...\n\n$samples\n        group lib.size norm.factors\nsample1     A    42832            1\nsample2     A    40511            1\nsample3     A    39299            1\nsample4     B    43451            1\nsample5     B    40613            1\nsample6     B    43662            1\n\n\nEsta estructura de datos es una lista con dos atributos. El atributo counts contiene la matriz de frecuencias de expresión génica, y el atributo samples es un data frame con información sobre las muestras estudiadas. Cada fila de este data frame se corresponde con una columna de la matriz de frecuencias y contiene las siguientes columnas\n\n\n\n\n\n\n\nColumna\nDescripción\n\n\n\n\ngroup\nGrupo experimental al que pertenece la muestra.\n\n\nlib.size\ntamaño de la librería (suma de frecuencias de la muestra).\n\n\nnorm.factors\nFactor de normalización.\n\n\n\nLa estructura de datos DGEList puede contener opcionalmente el atributo genes con anotaciones de los genes observados en las filas de la matriz de frecuencias.\nPara convertir esta estructura de datos en una del tipo DESeqDataSet se puede utilizar la función as.DESeqDataSet del paquete DEFormats.\n\nlibrary(DESeq2)\n\nLoading required package: SummarizedExperiment\n\n\nLoading required package: MatrixGenerics\n\n\nLoading required package: matrixStats\n\n\n\nAttaching package: 'matrixStats'\n\n\nThe following objects are masked from 'package:Biobase':\n\n    anyMissing, rowMedians\n\n\nThe following object is masked from 'package:dplyr':\n\n    count\n\n\n\nAttaching package: 'MatrixGenerics'\n\n\nThe following objects are masked from 'package:matrixStats':\n\n    colAlls, colAnyNAs, colAnys, colAvgsPerRowSet, colCollapse,\n    colCounts, colCummaxs, colCummins, colCumprods, colCumsums,\n    colDiffs, colIQRDiffs, colIQRs, colLogSumExps, colMadDiffs,\n    colMads, colMaxs, colMeans2, colMedians, colMins, colOrderStats,\n    colProds, colQuantiles, colRanges, colRanks, colSdDiffs, colSds,\n    colSums2, colTabulates, colVarDiffs, colVars, colWeightedMads,\n    colWeightedMeans, colWeightedMedians, colWeightedSds,\n    colWeightedVars, rowAlls, rowAnyNAs, rowAnys, rowAvgsPerColSet,\n    rowCollapse, rowCounts, rowCummaxs, rowCummins, rowCumprods,\n    rowCumsums, rowDiffs, rowIQRDiffs, rowIQRs, rowLogSumExps,\n    rowMadDiffs, rowMads, rowMaxs, rowMeans2, rowMedians, rowMins,\n    rowOrderStats, rowProds, rowQuantiles, rowRanges, rowRanks,\n    rowSdDiffs, rowSds, rowSums2, rowTabulates, rowVarDiffs, rowVars,\n    rowWeightedMads, rowWeightedMeans, rowWeightedMedians,\n    rowWeightedSds, rowWeightedVars\n\n\nThe following object is masked from 'package:Biobase':\n\n    rowMedians\n\ndds &lt;- as.DESeqDataSet(dge)\ndds\n\nclass: DESeqDataSet \ndim: 1000 6 \nmetadata(1): version\nassays(1): counts\nrownames(1000): gene1 gene2 ... gene999 gene1000\nrowData names(0):\ncolnames(6): sample1 sample2 ... sample5 sample6\ncolData names(3): group lib.size norm.factors\n\n\n\nEjemplo 1.2 Veamos cómo crear la estructura de datos correspondiente al estudio de Sheridan JM, et al. (2015) donde se obtuvieron datos de tres poblaciones de células (basal, progenitor luminal (LP) y luminal maduro (ML)) seleccionadas de las glándulas mamarias de ratones vírgenes hembra, cada una por triplicado. Los datos pueden obtenerse del repositorio Gene Expression Omnibus (GEO) mediante el identificador GSE63310.\nEn primer lugar cargamos la matriz de frecuencias.\n\n\nfrecuencias &lt;- read.csv(\"datos/matriz-frecuencias-genes.csv\", row.names = 1)\nhead(frecuencias)\n\n          LP1 ML1   B1   B2  ML2 LP2  B3 ML3 LP3\n497097      1   2  342  526    3   3 535   2   0\n100503874   0   0    5    6    0   0   5   0   0\n100038431   0   0    0    0    0   0   1   0   0\n19888       0   1    0    0   17   2   0   1   0\n20671       1   1   76   40   33  14  98  18   8\n27395     431 771 1368 1268 1564 769 818 468 342\n\n\nDespués cargamos el diseño con los grupos experimentales.\n\ndiseño &lt;- read.csv(\"datos/diseño-experimental.csv\")\ndiseño\n\n   Id Grupo Línea\n1 LP1    LP  L004\n2 ML1    ML  L004\n3  B1 Basal  L004\n4  B2 Basal  L006\n5 ML2    ML  L006\n6 LP2    LP  L006\n7  B3 Basal  L006\n8 ML3    ML  L008\n9 LP3    LP  L008\n\n\nA continuación creamos la estructura de datos DGEList.\n\n# Creación de la estructura de datos DGEList\ndge &lt;- DGEList(counts = frecuencias, group = diseño$Grupo)\n# Añadimos también la línea al diseño\ndge$samples$Línea &lt;- diseño$Línea\ndge\n\nAn object of class \"DGEList\"\n$counts\n          LP1 ML1  B1  B2 ML2 LP2  B3 ML3 LP3\n497097      1   2 342 526   3   3 535   2   0\n100503874   0   0   5   6   0   0   5   0   0\n100038431   0   0   0   0   0   0   1   0   0\n19888       0   1   0   0  17   2   0   1   0\n20671       1   1  76  40  33  14  98  18   8\n27174 more rows ...\n\n$samples\n    group lib.size norm.factors Línea\nLP1    LP 32863052            1  L004\nML1    ML 35335491            1  L004\nB1  Basal 57160817            1  L004\nB2  Basal 51368625            1  L006\nML2    ML 75795034            1  L006\nLP2    LP 60517657            1  L006\nB3  Basal 55086324            1  L006\nML3    ML 21311068            1  L008\nLP3    LP 19958838            1  L008\n\n\nA continuación anotamos los genes de las filas de la matriz de frecuencias. Para ello debe utilizarse un paquete específico para el genoma de la especie de donde proviene el RNA (Mus.muculus en este caso para el genoma del ratón).\n\nlibrary(Mus.musculus)\ngeneid &lt;- rownames(dge)\ngenes &lt;- select(Mus.musculus, keys = geneid, columns = c(\"SYMBOL\", \"TXCHROM\"), keytype = \"ENTREZID\")\n# Eliminamos duplicidad de algunos genes\ngenes &lt;- genes[!duplicated(genes$ENTREZID),]\ndge$genes &lt;- genes\ndge\n\nAn object of class \"DGEList\"\n$counts\n          LP1 ML1  B1  B2 ML2 LP2  B3 ML3 LP3\n497097      1   2 342 526   3   3 535   2   0\n100503874   0   0   5   6   0   0   5   0   0\n100038431   0   0   0   0   0   0   1   0   0\n19888       0   1   0   0  17   2   0   1   0\n20671       1   1  76  40  33  14  98  18   8\n27174 more rows ...\n\n$samples\n    group lib.size norm.factors Línea\nLP1    LP 32863052            1  L004\nML1    ML 35335491            1  L004\nB1  Basal 57160817            1  L004\nB2  Basal 51368625            1  L006\nML2    ML 75795034            1  L006\nLP2    LP 60517657            1  L006\nB3  Basal 55086324            1  L006\nML3    ML 21311068            1  L008\nLP3    LP 19958838            1  L008\n\n$genes\n   ENTREZID  SYMBOL TXCHROM\n1    497097    Xkr4    chr1\n2 100503874 Gm19938    &lt;NA&gt;\n3 100038431 Gm10568    &lt;NA&gt;\n4     19888     Rp1    chr1\n5     20671   Sox17    chr1\n27174 more rows ...\n\n\n\n\n\n1.1.2 Preprocesamiento\nUna vez preparada la estructura de datos, el siguiente paso es el preprocesamiento de datos. Normalmente comprende las siguientes tareas:\n\nNormalización de las frecuencias.\nEliminación de los genes con poca expresión.\nNormalización de las distribuciones de frecuencias de expresión génicas.\n\n\n1.1.2.1 Normalización de las frecuencias\nEl objetivo principal es normalizar las frecuencias de expresión génica para eliminar el efecto sobre las frecuencias de factores como la profundidad de secuenciado (a mayor profundidad de secuenciado mayores frecuencias) o el tamaño de los genes (a mayor tamaño mayores frecuencias). Generalmente se usan las siguientes transformaciones\n\nFrecuencias por millón (CPM). Se divide cada frecuencia por el tamaño en millones de la librería de la muestra a la que pertenece. Se realiza con la función cpm(dge).\nLogaritmo en base 2 de las frecuencias por millón (log2-CPM). Se calcula a partir de la anterior mediante la fórmula \\(\\log_2(CPM+\\frac{2}{L})\\), donde \\(L\\) es la longitud media de las librerías en millones. El término \\(\\frac{2}{L}\\) que se añade permite calcular el logaritmo para frecuencias nulas (ya que el logaritmo de 0 no existe). Se realiza con la función cmp(dge, log = TRUE).\nLecturas por kilobase de transcripción por millón (RPKM): Se realiza con la función rpkm(dge, longitud_genes) pasando la longitud de los genes.\nFragmentos por kilobase de transcripción por millón (FPKM).\n\nLas dos primeras no tienen en cuenta el tamaño de los genes, pero suelen usarse para la expresión génica diferencial donde el tamaño de los genes se supone constante en las distintas muestras.\n\nEjemplo 1.3 Siguiendo con el ejemplo anterior, calculamos las frecuencias por millón y el logaritmo de las frecuencias por millón.\n\ncpm &lt;- cpm(dge)\nsummary(cpm)\n\n      LP1                 ML1                  B1                 B2          \n Min.   :    0.000   Min.   :    0.000   Min.   :   0.000   Min.   :   0.000  \n 1st Qu.:    0.000   1st Qu.:    0.000   1st Qu.:   0.000   1st Qu.:   0.000  \n Median :    0.578   Median :    0.736   Median :   0.892   Median :   0.895  \n Mean   :   36.793   Mean   :   36.793   Mean   :  36.793   Mean   :  36.793  \n 3rd Qu.:   19.536   3rd Qu.:   23.546   3rd Qu.:  24.221   3rd Qu.:  23.341  \n Max.   :27807.947   Max.   :11546.719   Max.   :7951.408   Max.   :7389.433  \n      ML2                LP2                  B3                ML3          \n Min.   :   0.000   Min.   :    0.000   Min.   :   0.000   Min.   :   0.000  \n 1st Qu.:   0.000   1st Qu.:    0.000   1st Qu.:   0.000   1st Qu.:   0.000  \n Median :   0.699   Median :    0.711   Median :   0.908   Median :   0.845  \n Mean   :  36.793   Mean   :   36.793   Mean   :  36.793   Mean   :  36.793  \n 3rd Qu.:  23.827   3rd Qu.:   19.928   3rd Qu.:  21.439   3rd Qu.:  24.260  \n Max.   :7955.680   Max.   :29572.361   Max.   :9376.973   Max.   :7865.350  \n      LP3           \n Min.   :    0.000  \n 1st Qu.:    0.000  \n Median :    0.752  \n Mean   :   36.793  \n 3rd Qu.:   21.594  \n Max.   :16500.710  \n\nlcpm &lt;- cpm(dge, log = TRUE)\nsummary(lcpm)\n\n      LP1               ML1                B1                 B2         \n Min.   :-4.5074   Min.   :-4.5074   Min.   :-4.50743   Min.   :-4.5074  \n 1st Qu.:-4.5074   1st Qu.:-4.5074   1st Qu.:-4.50743   1st Qu.:-4.5074  \n Median :-0.6847   Median :-0.3589   Median :-0.09513   Median :-0.0901  \n Mean   : 0.1714   Mean   : 0.3312   Mean   : 0.43559   Mean   : 0.4089  \n 3rd Qu.: 4.2913   3rd Qu.: 4.5601   3rd Qu.: 4.60081   3rd Qu.: 4.5475  \n Max.   :14.7632   Max.   :13.4952   Max.   :12.95700   Max.   :12.8513  \n      ML2               LP2                B3                ML3         \n Min.   :-4.5074   Min.   :-4.5074   Min.   :-4.50743   Min.   :-4.5074  \n 1st Qu.:-4.5074   1st Qu.:-4.5074   1st Qu.:-4.50743   1st Qu.:-4.5074  \n Median :-0.4281   Median :-0.4064   Median :-0.07152   Median :-0.1704  \n Mean   : 0.3225   Mean   : 0.2529   Mean   : 0.40428   Mean   : 0.3708  \n 3rd Qu.: 4.5772   3rd Qu.: 4.3199   3rd Qu.: 4.42513   3rd Qu.: 4.6031  \n Max.   :12.9578   Max.   :14.8520   Max.   :13.19491   Max.   :12.9413  \n      LP3         \n Min.   :-4.5074  \n 1st Qu.:-4.5074  \n Median :-0.3300  \n Mean   : 0.2749  \n 3rd Qu.: 4.4355  \n Max.   :14.0102  \n\n\n\n\n\n1.1.2.2 Eliminación de genes con poca expresión\nAunque el objetivo del análisis de la expresión génica diferencial es detectar los genes que se expresan en un grupo experimental en comparación con los otros, cuando un gen no se expresa en ninguna de las muestras no tiene interés para el estudio y puede eliminarse.\nExisten diferentes criterios para eliminar los genes con poca expresión. El paquete EdgeR incorpora la siguiente función\n\nfilterByExpr(dge): Devuelve un vector de booleanos con nombres correspondientes a los genes de la estructura DEGList dge. Por defecto devuelve TRUE para cualquier gen con una frecuencia mayor o igual que 10 en al menos un número de muestras igual al del menor grupo experimental.\n\n\nEjemplo 1.4 Veamos cuántos genes no tienen expresión en ninguna muestra del ejemplo anterior.\n\n# Número de genes con expresión nula.\ntable(rowSums(dge$counts) == 0)  \n\n\nFALSE  TRUE \n22026  5153 \n\n\nEl siguiente gráfico muestra la distribución del logaritmo en base 2 de las frecuencias por millón.\n\n# Definimos una función para dibujar la distribución del logaritmo de las frecuencias por millón.\ndist_logcpm &lt;- function(lcpm) {\nlcpm |&gt; \n    as.tibble()  |&gt;\n    pivot_longer(everything(), names_to = \"Muestra\", values_to = \"LogCPM\") |&gt;\n    ggplot(aes(x = LogCPM, color = Muestra)) +\n    geom_density() +\n    labs(title = \"Distribución del logaritmo en base 2 de las frecuencias por millón\")\n}\n\ndist_logcpm(lcpm)\n\nWarning: `as.tibble()` was deprecated in tibble 2.0.0.\nℹ Please use `as_tibble()` instead.\nℹ The signature and semantics have changed, see `?as_tibble`.\n\n\n\n\n\nComo se observa ha una porcentaje significativo de genes que tiene una expresión muy baja (valores negativos).\nA continuación eliminamos de la estructura de datos los genes con poca expresión.\n\nfiltro &lt;- filterByExpr(dge)\ndge &lt;- dge[filtro, , keep.lib.sizes = F]\n\nY volvemos a dibujar la distribución del logaritmo en base 2 de las frecuencias por millón.\n\nlcpm &lt;- cpm(dge, log = TRUE)\ndist_logcpm(lcpm)\n\n\n\n\n\nComo se aprecia en el diagrama, el porcentaje de genes con baja expresión ha disminuido significativamente.\n\n\n1.1.2.3 Normalización de las distribuciones de frecuencias de expresión génicas\nDurante el proceso de secuenciación puede haber factores externos no biológicos que afecten a la expresión de los genes. Por ejemplo, la muestras del primer lote pueden tener mayores frecuencias que las del segundo lote. Como se supone que las muestras replicadas deben tener un rango y una distribución de frecuencias similares, en esta etapa se aplica otro procedimiento de normalización para garantizar que la distribución de frecuencias de cada muestra es similar. Para ello el paquete edgeR utiliza el método de las medias recortadas de los valores M por medio de la función\n\ncalcNormFactors(dge, method = \"TMM\"): Calcular los factores de escalado del tamaño de las librerías de cada muestra. Estos factores se guardan automáticamente en el data frame con la información de las muestras dge$samples.\n\n\nEjemplo 1.5 Siguiendo con el mismo ejemplo, calculamos los factores de escalado para cada muestra.\n\ndge &lt;- calcNormFactors(dge, method = \"TMM\")\ndge$samples$norm.factors\n\n[1] 0.8943956 1.0250186 1.0459005 1.0458455 1.0162707 0.9217132 0.9961959\n[8] 1.0861026 0.9839203\n\n\nA continuación se muestran los diagramas de cajas de las distribuciones normalizadas tras aplicar los factores de escalado.\n\nbox_logcpm &lt;- function(dge){\n  diseño &lt;- dge$samples\n  diseño$Muestra &lt;- row.names(diseño)\n  cpm(dge, log = TRUE) |&gt; \n    as.tibble() |&gt;\n    pivot_longer(everything(), names_to = \"Muestra\", values_to = \"LogCPM\") |&gt;\n    left_join(diseño, by = \"Muestra\") |&gt; \n    ggplot(aes(x = Muestra, y = LogCPM, fill = group)) +\n    geom_boxplot() +\n    labs(title = \"Distribución del logaritmo en base 2 de las frecuencias por millón\")\n}\n\nbox_logcpm(dge)\n\n\n\n\nComo se puede apreciar, después de la normalización, todas las muestras presentan una distribución de frecuencias similar.\n\n\n\n\n1.1.3 Análisis exploratorio\nUna vez preprocesados los datos comienza el análisis estadístico propiamente dicho. En una primera fase se suele realizar un análisis exploratorio de los datos que suele incluir los siguientes análisis:\n\nEscalado multidimensional (análisis de componentes principales).\n\n\n1.1.3.1 Escalado multidimensional\nEl escalado multidimensional mediante componente principales permite ver qué muestras son similares en cuando a la distribución de frecuencias de expresión génica. Los componentes principales son combinaciones lineales de los genes de la matriz de frecuencias que son ortogonales entre sí. El primer componente principal recoge la dimensión con mayor variabilidad de las frecuencias. El segundo recoge la dimensión don la mayor variabilidad no explicada por el primer componente principal y así sucesivamente. Normalmente los dos primeros componentes principales suelen recoger un porcentaje bastante alto de la variabilidad de las frecuencias. Al representar las muestras en estas dos dimensiones, las muestras más próximas entre sí, presentan una distribución de frecuencias de expresión génica similar. Para realizar esta representación se puede utilizar la siguiente función del paquete limma:\n\nplotMDS(dge): Realiza un diagrama de componentes principales de la matriz de frecuencias de la estructura de datos dge.\n\nAlternativamente, se pueden calcular los componentes principales mediante la función prcomp del paquete stats y luego usar la función autoplot del paquete ggfortify para dibujar el diagrama de componentes principales.\n\nEjemplo 1.6 A continuación se muestra cómo obtener el diagrama de componentes principales de la matriz de frecuencias de nuestro ejemplo.\n\nplotMDS(dge, col = as.numeric(dge$samples$group), main = \"Diagrama de componentes principales del logaritmo en base 2 de las frecuencias por millón\")\n\n\n\n\n\nlibrary(ggfortify)\nautoplot(prcomp(t(lcpm)), data = dge$samples, color = \"group\", loadings = F, loadings.label = F) +\nlabs(title = \"Diagrama de componentes principales del logaritmo en base 2 de las frecuencias por millón\")\n\n\n\n\nComo se puede apreciar las muestras de cada grupo experimental aparecen agrupadas. La mayor diferencia (a lo largo del primer componente principal) se da entre el grupo basal y los otros dos grupos. Esto indica que cuando se realice el análisis de expresión génica diferencial habrá bastantes genes con diferencias de expresión significativa entre el grupo basal y los otros dos, mientras que no habrá tantos al comparar los grupos LP y ML.\n\nOtra opción muy interesante es el paquete Glimma que permite dibujar un diagrama de componentes principales interactivo mediante la función\n\nglMDSPlot(lcpm): Dibuja un diagrama de componentes principales interactivo de la matriz de frecuencias lcpm.\n\n\nEjemplo 1.7 A continuación se muestra cómo obtener el diagrama de componentes principales para nuestro ejemplo con el paquete Glimma.\n\nlibrary(Glimma)\n#glMDSPlot(lcpm, groups = dge$samples[,c(2,5)])\ndds &lt;- DESeqDataSetFromMatrix(\n  countData = dge$counts,\n  colData = dge$samples,\n  rowData = dge$genes,\n  design = ~group\n)\nglimmaMDS(dds)\n\n\n\n\n\n\n\n\n\n1.1.4 Análisis de expresión génica diferencial\nLa última etapa del análisis, y la más importante, es la detección de los genes con una expresión significativamente diferente entre los grupos experimentales. Para ello se suelen utilizar modelos lineales o modelos lineales generalizados. En general, la estimación de los parámetros del modelo ajustado depende de la distribución teórica usada para modelizar las frecuencias de expresión génica. El paquete limma, por ejemplo, realiza un ajuste de modelo lineal suponiendo que las distribuciones de las variables implicadas son normales, mientras que el paquete edgeR modeliza las frecuencias de expresión de los genes observadas mediante la distribución binomial negativa, que es mucho más realista.\nEn general en las distribuciones de frecuencias de expresión génica, se ha observado que la varianza no es independiente de la media. Los métodos que modelizan las frecuencias mediante el modelo binomial negativo asumen una relación cuadrática entre la varianza y media.\nEl siguiente paso es estimar la dispersión de las frecuencias de expresión génica para cada gen. Para ello edgeR utiliza el método de la máxima verosimilitud condicionada y ajustada por percentiles, mediante la función\n\nestimateDisp(dge, diseño): Realiza una estimación de la dispersión de las frecuencias de expresión génica contenidas en la estructura del tipo DGEList dad en dge, de acuerdo al diseño experimental dado en diseño.\n\n\nEjemplo 1.8  \n\ndge &lt;- estimateDisp(dge)\n\nUsing classic mode.\n\n\n\nUna vez ajustado el modelo Binomial Negativo y estimada la dispersión, solo queda aplicar el contraste de comparación de la expresión génica diferencial entre los grupos experimentales. Para ello edgeR utiliza el test exacto similar al test exacto de Fisher, pero adaptado a la distribución Binomial Negativa. Para ello se usa la función\n\nexacTest(dge, pair=grupos): Realiza el contraste de comparación de la expresión génica a partir del las frecuencias de aparción de genes contenidas en la estructura del tipo DGEList dada en dge, entre los grupos experimentales dados en el vector grupos (solo puede contener dos grupos).\n\n\nEjemplo 1.9 En nuestro ejemplo realizamos tres contrastes para todos los posibles pares de grupos experimentales.\n\nexact_B_LP &lt;- exactTest(dge, pair= c(\"Basal\", \"LP\"))\nexact_B_ML &lt;- exactTest(dge, pair= c(\"Basal\", \"ML\"))\nexact_LP_ML &lt;- exactTest(dge, pair= c(\"LP\", \"ML\"))\n\n\nTras realizar el contraste se puede utilizar la siguiente función para obtener un resumen con el número de genes subrexpresados y sobrexpresados significativamente.\n\nsummary(decideTests(test)): Devuelve una tabla con los genes subexpresados, sobreexpresados significativamente, así como lo que no presentan cambios significativos a partir de los resultados del contraste test.\n\nFinalmente, para ver los genes con diferencias de expresión más estadísticamente significativas se puede utilizar la función\n\ntopTags(test): Devuelve un data frame con los genes con diferencias de expresión estadísticamente más significativas entre los grupos experimentales comparados en objeto de resultados del contraste test.\n\n\nEjemplo 1.10 Resumen con los genes subexpresados y sobreexpresados significativamente entre el grupo Basal y LP.\n\nsummary(decideTests(exact_B_LP))\n\n       LP-Basal\nDown       4864\nNotSig     7203\nUp         4557\n\n\nGenes con diferencias más significativas entre el grupo Basal y el grupo LP.\n\ntopTags(exact_B_LP)\n\nComparison of groups:  LP-Basal \n       ENTREZID   SYMBOL TXCHROM     logFC   logCPM        PValue           FDR\n67451     67451     Pkp2   chr16  5.661601 5.672839 2.184632e-164 3.631733e-160\n19253     19253   Ptpn18    chr1  5.588760 5.344834 3.519102e-160 2.925078e-156\n218518   218518 Marveld2   chr13  5.216899 6.054980 4.369286e-157 2.421167e-153\n50722     50722    Dkkl1    chr7  6.296222 6.098528 6.043793e-156 2.511800e-152\n227960   227960      Gca    chr2  5.516041 5.060151 6.024796e-144 2.003124e-140\n242505   242505    Rasef    chr4  6.071991 6.704767 2.430700e-143 6.734659e-140\n320007   320007    Sidt1   chr16  6.297688 4.897542 1.142473e-135 2.713210e-132\n22249     22249   Unc13b    chr4  4.343846 6.600123 1.313443e-134 2.729335e-131\n66871     66871    Cpne8   chr15 -4.685486 5.862087 4.580752e-129 8.461158e-126\n269132   269132 Colgalt2    chr1 -4.989659 5.011534 4.878508e-126 8.110031e-123\n\n\nResumen con los genes subexpresados y sobreexpresados significativamente entre el grupo Basal y ML.\n\nsummary(decideTests(exact_B_ML))\n\n       ML-Basal\nDown       4773\nNotSig     7011\nUp         4840\n\n\nGenes con diferencias más significativas entre el grupo Basal y el grupo ML.\n\ntopTags(exact_B_ML)\n\nComparison of groups:  ML-Basal \n       ENTREZID   SYMBOL TXCHROM     logFC   logCPM        PValue           FDR\n50722     50722    Dkkl1    chr7  6.728394 6.098528 4.166088e-173 6.925705e-169\n242505   242505    Rasef    chr4  6.678297 6.704767 2.371625e-165 1.971295e-161\n21804     21804  Tgfb1i1    chr7 -6.120166 6.012779 9.151423e-156 5.071108e-152\n22249     22249   Unc13b    chr4  4.561206 6.600123 3.599522e-150 1.495961e-146\n20661     20661    Sort1    chr3  4.948551 7.722875 8.615672e-144 2.864539e-140\n12521     12521     Cd82    chr2  4.666737 8.007651 8.771904e-143 2.430402e-139\n67451     67451     Pkp2   chr16  5.100406 5.672839 7.763029e-140 1.843608e-136\n218518   218518 Marveld2   chr13  4.815118 6.054980 7.247449e-139 1.506020e-135\n78896     78896    Ecrg4    chr1 -6.587115 5.670792 9.526597e-139 1.759668e-135\n214968   214968   Sema6d    chr2 -5.935614 6.101960 1.913875e-125 3.181626e-122\n\n\nResumen con los genes subexpresados y sobreexpresados significativamente entre el grupo LP y ML.\n\nsummary(decideTests(exact_LP_ML))\n\n       ML-LP\nDown    2432\nNotSig 11226\nUp      2966\n\n\nGenes con diferencias más significativas entre el grupo LP y el grupo ML.\n\ntopTags(exact_LP_ML)\n\nComparison of groups:  ML-LP \n       ENTREZID  SYMBOL TXCHROM     logFC   logCPM       PValue          FDR\n94212     94212    Pag1    chr3 -2.616277 5.916572 9.314994e-31 1.548525e-26\n214968   214968  Sema6d    chr2 -2.378756 6.101960 3.482661e-27 2.894788e-23\n114479   114479  Slc5a5    chr8  2.879278 7.770145 1.246288e-26 6.906100e-23\n207592   207592 Tbc1d16   chr11  2.308784 5.659683 6.219699e-26 2.584907e-22\n13617     13617   Ednra    chr8 -3.187364 4.014091 1.557011e-25 5.176750e-22\n231605   231605  Galnt9    chr5  3.289480 2.482287 2.766785e-24 7.665838e-21\n12614     12614  Celsr1   chr15  2.826770 5.693953 1.525133e-23 3.621973e-20\n14778     14778    Gpx3   chr11  3.045448 9.996423 4.769484e-23 9.910988e-20\n107895   107895   Mgat5    chr1  2.025411 5.535760 9.509983e-23 1.756600e-19\n320127   320127    Dgki    chr6  2.415427 4.951953 1.261948e-22 2.097863e-19\n\n\n\nOtra alternativa, para diseños experimentales que incluye más de un factor, es usar modelos lineales generalizados (GLM). El primer paso es definir la matriz del diseño del experimento, que incluye las variables que definen grupos experimentales. Para ello se utiliza la función\n\nmodel.matrix(formula-diseño): Construye una matriz con el diseño experimental de acuerdo a la fórmula dada en formula-diseño. Esta fórmula es similar a la fórmula que que utiliza en un ANOVA para definir el diseño experimental, donde las variables se añaden con el operador +, y se hacen interactuar con el operador *.\n\n\nEjemplo 1.11 Continuando con el mismo ejemplo, definimos la matriz de diseño del modelo.\n\ndiseño &lt;- model.matrix(~ 0 + dge$samples$group + dge$samples$Línea)\ncolnames(diseño) &lt;- gsub(\"dge\\\\$samples\\\\$group\", \"\", colnames(diseño))\ncolnames(diseño) &lt;- gsub(\"dge\\\\$samples\\\\$\", \"\", colnames(diseño))\ndiseño\n\n  Basal LP ML LíneaL006 LíneaL008\n1     0  1  0         0         0\n2     0  0  1         0         0\n3     1  0  0         0         0\n4     1  0  0         1         0\n5     0  0  1         1         0\n6     0  1  0         1         0\n7     1  0  0         1         0\n8     0  0  1         0         1\n9     0  1  0         0         1\nattr(,\"assign\")\n[1] 1 1 1 2 2\nattr(,\"contrasts\")\nattr(,\"contrasts\")$`dge$samples$group`\n[1] \"contr.treatment\"\n\nattr(,\"contrasts\")$`dge$samples$Línea`\n[1] \"contr.treatment\"\n\n\n\nAl igual que antes, antes de realizar el contraste hay que estimar la dispersión conjunta y para cada gen, pero ahora hay que introducir el diseño como un parámetro de la función estimateDisp.\n\nEjemplo 1.12 Realizamos la estimación de la dispersión para nuestro ejemplo.\n\ndge &lt;- estimateDisp(dge, diseño)\n\n\nUna vez estimada la dispersión y ajustados los modelos generalizados binomiales negativos, ya se puede realizar el contraste de comparación de expresión génica. Para ello se utilizan las siguientes funciones\n\nglmQLFit(dge, diseño): Realiza el ajuste del modelo generalizado de comparación de expresión génica mediante el test F de cuasi verosimilitud, con las frecuencias de expresión de la estructura del tipo DGEList dada en dge y de acuerdo al diseño experimental indicado en diseño.\nmakeContrast(grupo1 - grupo2, levels=diseño): Define los grupos grupo1 y grupo2 a comparar en el contraste pares para la diferencia en la expresión génica.\nglmQLFTest(modelo-ajustado, contrast=contraste). Realiza el contraste de comparación por pares a partir del modelo ajustado modelo-ajustado. El modelo ajustado tiene varios coeficientes dependiendo del número grupos experimentales, el primero corresponde al ajuste base para el grupo control, y los sucesivos a las diferencias de los otros grupos experimentales con el control.\nglmTreat(modelo-ajustado, contrast=contraste, lfc = n). Realiza el contraste de comparación por pares similar al de la función anterior, pero descartando los genes con un logaritmo en base dos de la razón de cambio (logFC) menor que el valor dado en el parámetro lfc.\n\n\nEjemplo 1.13 Realizamos el ajuste del modelo linear generalizado para nuestro ejemplo.\n\nmodelo &lt;- glmQLFit(dge, diseño)\n\nY, a continuación, los contrastes por pares. En primer lugar, comparamos Basal con LP y mostramos los genes más diferenciados.\n\ncontraste &lt;- makeContrasts(Basal - LP, levels = diseño) \nglmQL_B_LP &lt;- glmQLFTest(modelo, contrast = contraste)\nsummary(decideTests(glmQL_B_LP))\n\n       1*Basal -1*LP\nDown            4523\nNotSig          7192\nUp              4909\n\ntopTags(glmQL_B_LP)\n\nCoefficient:  1*Basal -1*LP \n       ENTREZID   SYMBOL TXCHROM     logFC   logCPM        F       PValue\n242505   242505    Rasef    chr4 -5.941271 6.704195 1863.844 5.629045e-11\n67451     67451     Pkp2   chr16 -5.745868 5.671932 1845.036 5.867451e-11\n19253     19253   Ptpn18    chr1 -5.655466 5.343492 1616.133 1.008466e-10\n53624     53624    Cldn7   chr11 -5.527387 7.529234 1327.691 2.251566e-10\n14275     14275    Folr1    chr7 -6.925474 5.510509 1313.864 2.349910e-10\n218518   218518 Marveld2   chr13 -5.153654 6.054055 1300.770 2.448002e-10\n70350     70350    Basp1   chr15 -6.086771 6.624263 1223.255 3.145873e-10\n228543   228543     Rhov    chr2 -6.263337 6.939962 1112.552 4.632731e-10\n70737     70737      Cgn    chr3 -5.466154 6.644032 1075.182 5.325457e-10\n320007   320007    Sidt1   chr16 -6.345681 4.895659 1071.587 5.398676e-10\n                FDR\n242505 4.877025e-07\n67451  4.877025e-07\n19253  5.588246e-07\n53624  6.258841e-07\n14275  6.258841e-07\n218518 6.258841e-07\n70350  6.258841e-07\n228543 6.258841e-07\n70737  6.258841e-07\n320007 6.258841e-07\n\n\nA continuación comparamos Basal con ML.\n\ncontraste &lt;- makeContrasts(Basal - ML, levels = diseño) \nglmQL_B_ML &lt;- glmQLFTest(modelo, contrast = contraste)\nsummary(decideTests(glmQL_B_LP))\n\n       1*Basal -1*LP\nDown            4523\nNotSig          7192\nUp              4909\n\ntopTags(glmQL_B_ML)\n\nCoefficient:  1*Basal -1*ML \n       ENTREZID   SYMBOL TXCHROM     logFC   logCPM        F       PValue\n242505   242505    Rasef    chr4 -6.539106 6.704195 2151.638 3.128356e-11\n71740     71740  Nectin4    chr1 -5.586420 6.447456 1566.715 1.144948e-10\n67451     67451     Pkp2   chr16 -5.178572 5.671932 1566.704 1.144981e-10\n53624     53624    Cldn7   chr11 -5.504748 7.529234 1333.741 2.210153e-10\n78896     78896    Ecrg4    chr1  6.456502 5.672665 1256.914 2.815928e-10\n19253     19253   Ptpn18    chr1 -4.594745 5.343492 1155.825 3.964889e-10\n50722     50722    Dkkl1    chr7 -6.778277 6.097962 1152.189 4.016182e-10\n12521     12521     Cd82    chr2 -4.687198 8.007496 1151.233 4.029809e-10\n218518   218518 Marveld2   chr13 -4.755942 6.054055 1146.641 4.096058e-10\n108153   108153  Adamts7    chr9  4.697586 5.748726 1135.707 4.259335e-10\n                FDR\n242505 5.200579e-07\n71740  6.188524e-07\n67451  6.188524e-07\n53624  6.188524e-07\n78896  6.188524e-07\n19253  6.188524e-07\n50722  6.188524e-07\n12521  6.188524e-07\n218518 6.188524e-07\n108153 6.188524e-07\n\n\nY ahora comparamos LP con ML.\n\ncontraste &lt;- makeContrasts(LP - ML, levels = diseño) \nglmQL_LP_ML &lt;- glmQLFTest(modelo, contrast = contraste)\nsummary(decideTests(glmQL_B_LP))\n\n       1*Basal -1*LP\nDown            4523\nNotSig          7192\nUp              4909\n\ntopTags(glmQL_LP_ML)\n\nCoefficient:  1*LP -1*ML \n      ENTREZID  SYMBOL TXCHROM    logFC   logCPM        F       PValue\n11815    11815    Apod   chr16 4.283581 6.321010 486.9859 1.330736e-08\n20319    20319   Sfrp2    chr3 2.753550 4.598845 314.7591 7.723980e-08\n15212    15212    Hexb   chr13 2.909540 5.986395 286.4532 1.126803e-07\n13132    13132    Dab2   chr15 2.557433 5.184149 271.5224 1.395871e-07\n14962    14962     Cfb   chr17 1.803855 4.762677 253.8898 1.825182e-07\n18552    18552   Pcsk5   chr19 2.158846 4.236652 238.4773 2.342784e-07\n12424    12424     Cck    chr9 4.313973 4.761400 236.2864 2.430493e-07\n74365    74365  Lonrf3    chrX 2.245457 4.517287 226.4194 2.880104e-07\n73341    73341 Arhgef6    chrX 2.346351 7.760006 219.2708 3.271778e-07\n18858    18858   Pmp22   chr11 1.724631 5.964828 204.3723 4.325480e-07\n               FDR\n11815 0.0002212215\n20319 0.0005622194\n15212 0.0005622194\n13132 0.0005622194\n14962 0.0005622194\n18552 0.0005622194\n12424 0.0005622194\n74365 0.0005622194\n73341 0.0005622194\n18858 0.0005622194\n\n\nPor último buscamos los genes con una expresión diferente en los tres grupos experimentales.\n\nglmQL_all &lt;- glmQLFTest(modelo, coef = 2:3)\ntopTags(glmQL_all)\n\nCoefficient:  LP ML \n       ENTREZID  SYMBOL TXCHROM  logFC.LP  logFC.ML   logCPM        F\n68598     68598  Dnajc8    chr4 -14.75481 -14.52690 5.503444 3917.603\n78658     78658  Ncapd3    chr9 -15.14518 -15.10475 5.096621 3893.545\n76251     76251 Ercc6l2   chr13 -14.63388 -14.74224 5.220876 3886.831\n67444     67444   Ilkap    chr1 -14.43347 -14.33013 5.399407 3841.724\n58859     58859  Efemp2   chr19 -14.80616 -14.65589 5.410953 3840.347\n24045     24045  Scamp3    chr3 -15.06093 -14.58439 5.202811 3765.952\n21371     21371    Tbca   chr13 -14.99664 -15.05218 5.185991 3765.800\n57443     57443   Fbxo3    chr2 -14.01332 -14.04999 5.861901 3765.551\n80517     80517 Herpud2    chr9 -14.26672 -14.05908 5.853877 3756.947\n231464   231464  Cnot6l    chr5 -14.28498 -14.01301 5.835142 3750.520\n             PValue          FDR\n68598  5.798476e-13 3.280446e-11\n78658  5.946855e-13 3.280446e-11\n76251  5.989106e-13 3.280446e-11\n67444  6.282843e-13 3.280446e-11\n58859  6.292087e-13 3.280446e-11\n24045  6.817772e-13 3.280446e-11\n21371  6.818903e-13 3.280446e-11\n57443  6.820748e-13 3.280446e-11\n80517  6.885051e-13 3.280446e-11\n231464 6.933572e-13 3.280446e-11\n\n\n\n\n\n1.1.5 Visualización de resultados\nExisten diferentes diagramas para representar los resultados del análisis génico diferencial. En esta sección presentamos dos de los diagramas más utlizados, el diagrama MD y el diagrama de volcán.\n\n1.1.5.1 Diagrama MD\nEste diagrama consiste en un mapa de puntos donde cada punto corresponde a un gen. El eje X representa la media del logaritmo de las frecuencias por millón (lcpm) y el eje Y representa el logaritmo en base 2 de la razón de cambio (logFC). Habitualmente, los genes subexpresados significativamente se dibujan en color azul, mientras que los sobreexpresados se dibujan en color rojo.\nPara dibujar un diagrama MD con edgeR se utiliza la función\n\nplotMD(contraste): Dibuja un diagrama MD a partir de los resultados del contraste de comparación de expresión génica dado en contraste.\n\n\nEjemplo 1.14 Dibujamos primero el diagrama MD para la comparación de los grupos Basal y LP.\n\nplotMD(glmQL_B_LP)\n\n\n\n\nA continuación para la comparación de los grupos Basal y ML.\n\nplotMD(glmQL_B_ML)\n\n\n\n\nY finalmente para la comparación de los grupos LP y ML.\n\nplotMD(glmQL_LP_ML)\n\n\n\n\n\n\n\n\n1.1.6 Diagrama de volcán\nUn diagrama de volcán es una representación gráfica utilizada en Bioinformática para visualizar los resultados del análisis de expresión génica diferencial u otros tipos de análisis de datos ómicos de alto rendimiento, como Proteómica o Metabolómica.\nEn un diagrama de volcán, cada punto de datos representa un gen (o una proteína/metabolito) del conjunto de datos. El eje x muestra el cambio logarítmico o tamaño del efecto, que mide la magnitud del cambio en la expresión entre dos condiciones (por ejemplo, tratamiento vs. control). El eje y muestra la significación estadística, a menudo representada como el logaritmo negativo del valor p. Un valor p más pequeño indica una mayor significación estadística.\nA menudo, los puntos en el gráfico de volcán están coloreados o resaltados según su significación estadística y cambio en la expresión. Por lo general, los genes significativamente sobreexpresados se representan en rojo, los genes significativamente subexpresados en azul y los genes no significativamente expresados en gris o negro. Cuanto más significativos sean estadísticamente y mayor sea el cambio en la expresión, más alejados estarán los puntos del centro del gráfico.\nedgR no incorpora una función para realizar este tipo de diagramas, así que utilizaremos la siguiente función del paquete Glimma\n\nglimmaVolcano(modelo, dge = dge): Realiza diagrama de volcán del modelo ajustado fit sobre la estructura de datos del tipo DGEList dada en dge.\n\nEn el capítulo Diagramas de Volcán se explica con más detalle su creación con el paquete ggplot2.\n\nEjemplo 1.15 Dibujamos primero el diagrama de volcán para la comparación de los grupos Basal y LP.\n\nlibrary(Glimma)\nglimmaVolcano(glmQL_B_LP, dge = dge)\n\n\n\n\n\n\nA continuación para la comparación de los grupos Basal y ML.\n\nlibrary(Glimma)\nglimmaVolcano(glmQL_B_ML, dge = dge)\n\n\n\n\n\n\nY finalmente para la comparación de los grupos LP y ML.\n\nlibrary(Glimma)\nglimmaVolcano(glmQL_LP_ML, dge = dge)"
  },
  {
    "objectID": "01-rna-seq.html#análisis-de-expresión-génica-diferencial-con-deseq2",
    "href": "01-rna-seq.html#análisis-de-expresión-génica-diferencial-con-deseq2",
    "title": "1  Análisis de expresión génica diferencial (RNA-Seq)",
    "section": "1.2 Análisis de expresión génica diferencial con DESeq2",
    "text": "1.2 Análisis de expresión génica diferencial con DESeq2\nEl paquete DESeq2 es otro de los paquetes más utilizados para el análisis de la expresión génica diferencial, que al igual que edgeR incorpora procedimientos para todas las etapas del análisis. También está disponible en el repositorio Bioconductor.\n\n1.2.1 Estructura de Datos\nEl paquete DESeq2 utiliza la estructura de datos DESeqDataSet para guardar la matriz de frecuencias de expresión génica. Esta estructura se deriva, a su vez, de la estructura SingleCellExperiment, que además de la matriz de frecuencias de expresión de los genes incluye también los grupos experimentales a los que pertenecen las muestras estudiadas y otra información que se va generando a medida que progresa el análisis.\n\n\n\nEl objeto SingleCellExperiment\n\n\nEl paquete SingleCellExperiment de Bioconductor define esta estructura de datos, y puede instalarse mediante el siguiente código\nBiocManager::install('SingleCellExperiment')\nPara crear la estructura de datos DESeqDataSet se utiliza la siguiente función\n\nDESeqDataSetFromMatrix(countData = frec, colData = grupo, design = diseño): Crea una estructura del tipo DESeqDataSet con la matriz de frecuencias de expresión génica frec (con genes en filas y muestras en columnas), y el data frame grupo con los grupos experimentales a los que pertenecen las muestras analizadas en las columnas de la matriz de frecuencias y la columna diseño del data frame grupo que contiene los grupos experimentales a comparar.\n\n\nlibrary(DESeq2)\ndds &lt;- DESeqDataSetFromMatrix(\n  countData = dge$counts,\n  colData = dge$samples,\n  rowData = dge$genes,\n  design = ~group\n)\ndds\n\nclass: DESeqDataSet \ndim: 16624 9 \nmetadata(1): version\nassays(1): counts\nrownames(16624): 497097 20671 ... 100861924 170942\nrowData names(3): ENTREZID SYMBOL TXCHROM\ncolnames(9): LP1 ML1 ... ML3 LP3\ncolData names(4): group lib.size norm.factors Línea\n\n\n\n\n1.2.2 Preprocesamiento\nEl paquete DESeq2 realiza el preprocesamiento de maneare automática cuando se lanza el procedimiento para el análisis de expresión génica diferencial.\n\n\n1.2.3 Análisis exploratorio\n\n\n1.2.4 Escalado multidimensional\nAl igual que antes, el principal análisis exploratorio es el escalado multidimensional. Para realizarlo podemos usar de nuevo la siguiente función del plaqute Glimma.\n\nglimmaMDS(dds): Realiza un diagrama interactivo de componenetes principales a partir de la estructura de datos dds.\n\n\nEjemplo 1.16 A continuación se muestra cómo obtener el diagrama de componentes principales para nuestro ejemplo con el paquete Glimma.\n\nlibrary(Glimma)\nglimmaMDS(dds)\n\n\n\n\n\n\n\n\n1.2.5 Análisis de expresión génica diferencial\nPara realizar el análisis de expresión génica diferencial el paquete DESeq2 utiliza la siguiente función\n\nDESeq(dds): Realiza el preprocesamiento de datos y el ajuste del modelo para el análisis de expresión génica diferencial de la estructura de datos dds.\n\n\nEjemplo 1.17 A continuación se muestra cómo realizar el análisis de expresión génica diferencial para nuestro ejemplo.\n\ndds &lt;- DESeq(dds)\n\nestimating size factors\n\n\nestimating dispersions\n\n\ngene-wise dispersion estimates\n\n\nmean-dispersion relationship\n\n\nfinal dispersion estimates\n\n\nfitting model and testing\n\ndds\n\nclass: DESeqDataSet \ndim: 16624 9 \nmetadata(1): version\nassays(4): counts mu H cooks\nrownames(16624): 497097 20671 ... 100861924 170942\nrowData names(29): ENTREZID SYMBOL ... deviance maxCooks\ncolnames(9): LP1 ML1 ... ML3 LP3\ncolData names(5): group lib.size norm.factors Línea sizeFactor\n\n\n\n\n\n1.2.6 Visualización de datos\n\n1.2.6.1 Diagrama MA\n\nEjemplo 1.18  \n\nglimmaMA(dds)\n\n15 of 16624 genes were filtered out in DESeq2 tests\n\n\n\n\n\n\n\n\n\n\n1.2.6.2 Diagrama de volcán\n\nEjemplo 1.19  \n\nglimmaVolcano(dds)"
  },
  {
    "objectID": "01-rna-seq.html#referencias",
    "href": "01-rna-seq.html#referencias",
    "title": "1  Análisis de expresión génica diferencial (RNA-Seq)",
    "section": "1.3 Referencias",
    "text": "1.3 Referencias\n\nOrchestrating Single-Cell Analysis with Bioconductor. (s. f.). Recuperado 12 de junio de 2023, de https://github.com/LTLA/OSCA\nLaw, Charity, et al. RNA-seq analysis is easy as 1-2-3 with limma, Glimma and edgeR."
  },
  {
    "objectID": "diagrama-volcan.html",
    "href": "diagrama-volcan.html",
    "title": "2  Diagramas de volcán",
    "section": "",
    "text": "Un diagrama de volcán es una representación gráfica utilizada en Bioinformática para visualizar los resultados del análisis de expresión génica diferencial u otros tipos de análisis de datos ómicos de alto rendimiento, como Proteómica o Metabolómica.\nEn un diagrama de volcán, cada punto de datos representa un gen (o una proteína/metabolito) del conjunto de datos. El eje x muestra el cambio logarítmico o tamaño del efecto, que mide la magnitud del cambio en la expresión entre dos condiciones (por ejemplo, tratamiento vs. control). El eje y muestra la significación estadística, a menudo representada como el logaritmo negativo del valor p. Un valor p más pequeño indica una mayor significación estadística.\nA menudo, los puntos en el gráfico de volcán están coloreados o resaltados según su significación estadística y cambio en la expresión. Por lo general, los genes significativamente sobreexpresados se representan en rojo, los genes significativamente subexpresados en azul y los genes no significativamente expresados en gris o negro. Cuanto más significativos sean estadísticamente y mayor sea el cambio en la expresión, más alejados estarán los puntos del centro del gráfico.\nEl nombre del del diagrama proviene de su forma característica, donde los genes significativos con grandes cambios en la expresión se representan como puntos alejados del centro, asemejándose a las laderas de un volcán. Mientras tanto, los genes no significativos se agrupan cerca del centro, formando la caldera del volcán.\nLos investigadores utilizan gráficos de volcán para identificar rápidamente genes o proteínas con cambios sustanciales en la expresión entre condiciones y, al mismo tiempo, considerar su significación estadística. Esta visualización ayuda a identificar posibles biomarcadores, genes diferencialmente expresados o vías biológicas relevantes asociadas con condiciones o tratamientos específicos.\nEn esta sección veremos con construir un diagrama de volcán con R.\n\n\n\n\n\n\nDatos\n\n\n\nUtilizaremos los datos del estudio Fu et al. Nat Cell Biol. 2015, que contienen los resultados del análisis de expresión génica diferencial (logaritmo en base 2 de la razón de cambio y p-valor) de un estudio para comparar dos grupos experimentales.\n\n\n\n# Carga de datos\ndf &lt;- read_csv(\"datos/datos-volcan.csv\")\nhead(df)\n\n# A tibble: 6 × 8\n  ENTREZID SYMBOL  GENENAME               logFC AveExpr     t  P.Value adj.P.Val\n     &lt;dbl&gt; &lt;chr&gt;   &lt;chr&gt;                  &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt;    &lt;dbl&gt;     &lt;dbl&gt;\n1    12992 Csn1s2b casein alpha s2-like B -8.60   3.56  -43.8 3.83e-15  6.05e-11\n2    13358 Slc25a1 solute carrier family… -4.12   5.78  -29.9 1.76e-13  1.39e- 9\n3    11941 Atp2b2  ATPase, Ca++ transpor… -7.39   1.28  -27.8 4.84e-13  2.43e- 9\n4    20531 Slc34a2 solute carrier family… -4.18   4.28  -27.1 6.16e-13  2.43e- 9\n5   100705 Acacb   acetyl-Coenzyme A car… -4.31   4.44  -25.2 1.50e-12  4.74e- 9\n6    13645 Egf     epidermal growth fact… -5.36   0.736 -24.6 2.12e-12  5.57e- 9\n\n\n\n# Creación del diagrama de volcán\nvplot &lt;- df %&gt;%\n  ggplot(aes(x = logFC, y = -log10(adj.P.Val))) + \n  geom_point(color = \"grey40\")\nvplot\n\n\n\n\nPara diferenciar los genes con mayor expresión diferencial, es decir, con mayor razón de cambio, se suelen añadir dos rectas verticales. La recta más a la izquierda representa el logaritmo en base 2 de la máxima razón de cambio para considerar un gen subexpresado (suele tomarse una razón de cambio 1/2, es decir, el gen en el grupo experimental se expresa la mitad que en el grupo control), mientras que la recta de la derecha representa el logaritmo en base 2 de la mínima razón de cambio para considerar un gen sobreexpresado (suele tomarse una razón de cambio 2, es decir, el gen en el grupo experimental se expresa el doble que en el grupo control).\n\n# Determinamos las coordenadas mínimas y máximas para las escalas de los ejes.\nrangex &lt;- max(-min(df$logFC), max(df$logFC))\nmaxy &lt;- max(-log10(df$adj.P.Val))\n# Dibujo de líneas verticales para el tamaño del efecto\nvplot &lt;- vplot + geom_vline(xintercept = c(log2(0.5), log2(2)),linetype = \"dashed\") +\n  # Etiquetamos las líneas de la razón de cambio.\n  annotate(\"text\", x = log2(0.5), y = maxy, label = \"FC=1/2\", vjust = 0) +\n  annotate(\"text\", x = log2(2), y = maxy, label = \"FC=2\", vjust = 0) +\n  theme(plot.margin = unit(c(3, 4, 1, 1), \"lines\")) +\n  coord_cartesian(xlim = c(-rangex, rangex), ylim = c(0, maxy), expand = FALSE, clip = \"off\") \nvplot\n\n\n\n\nDel mismo modo, se suelen dibujar líneas verticales para identificar los genes con una expresión diferencial estadísticamente significativa (p-valor menor que 0.05 o 0.01).\n\nvplot &lt;- vplot +\n  geom_hline(yintercept = c(-log10(0.05), -log10(0.01)), linetype = \"dashed\") +\n  # Etiquetamos las líneas de los p-valores\n  annotate(\"text\", x = 10.2, y = -log10(0.05), label = \"p=0.05\", hjust = 0) +\n  annotate(\"text\", x = 10.2, y = -log10(0.01), label = \"p=0.01\", hjust = 0) \nvplot\n\n\n\n\nPara destacar los genes con mayor expresión diferencial y mayor significación estadística, es habitual dibujarlos con un color diferenciado (típicamente azul para los subexpresados y rojo para los sobre expresados). Para ello, previamente hay que crear una nueva columna en el conjunto de datos con las categorías categorías de expresión(normalmente “Down” para los genes subexpresados significativamente, “NS” para los genes que no cambian y “Up” para los genes sobreexpresados significativamente)\n\n# Crear nueva columna con categorías de expresión génica.\ndf &lt;- df |&gt;\n    mutate(Expresión = case_when(\n        logFC &gt;= log2(2) & adj.P.Val &lt;= 0.05 ~ \"Up\", \n        logFC &lt;= log2(0.5) & adj.P.Val &lt;= 0.05 ~ \"Down\",\n        TRUE ~ \"NC\"))\n# Mostrar tabla con frecuencias de genes subexpresados y sobreexpresados\ndf  |&gt; \n    count(Expresión)  |&gt; \n    gt()\n\n\n\n\n\n  \n    \n    \n      Expresión\n      n\n    \n  \n  \n    Down\n1245\n    NC\n13578\n    Up\n981\n  \n  \n  \n\n\n\n\n\n# Definimos los colores para los genes subexpresados, normales y sobreexpresados.\ncolores &lt;- c(\"dodgerblue3\", \"gray50\", \"firebrick3\")\nvplot &lt;- df %&gt;%\n  ggplot(aes(x = logFC, y = -log10(adj.P.Val))) + \n  geom_point(aes(color = Expresión)) +\n  scale_color_manual(values = colores) +\n  # Añadimos las líneas de la razón de cambio.\n  geom_vline(xintercept = c(log2(0.5), log2(2)),linetype = \"dashed\") +\n  # Etiquetamos las líneas de la razón de cambio.\n  annotate(\"text\", x = log2(0.5), y = maxy, label = \"FC=1/2\", vjust = 0) +\n  annotate(\"text\", x = log2(2), y = maxy, label = \"FC=2\", vjust = 0) +\n  # Añadimos las líneas de los p-valores.\n  geom_hline(yintercept = c(-log10(0.05), -log10(0.01)), linetype = \"dashed\") +\n  # Etiquetamos las líneas de los p-valores.\n  annotate(\"text\", x = rangex+0.1, y = -log10(0.05), label = \"p=0.05\", hjust = 0) +\n  annotate(\"text\", x = rangex+0.1, y = -log10(0.01), label = \"p=0.01\", hjust = 0) +\n  theme(plot.margin = unit(c(2, 1, 1, 1), \"lines\")) +\n  coord_cartesian(xlim = c(-rangex, rangex), ylim = c(0, maxy), expand = FALSE, clip = \"off\")\nvplot\n\n\n\n\nTambién se pueden destacar algunos genes de interés en el gráfico mediante etiquetas.\n\n# Creamos un nuevo conjunto de datos con los genes a destacar\ndf_sig &lt;- df  |&gt; \n  filter(SYMBOL %in% c(\"Il15\", \"Il34\", \"Il24\"))\n\n# df_pvalor &lt;- data.frame(x)\n\nvplot &lt;- vplot +  \n  # Etiquetamos los genes a destacar\n  geom_label_repel(data = df_sig, aes(label = SYMBOL), force = 2, nudge_y = 1) \nvplot\n\n\n\n\nFinalmente, añadimos un título al diagrama.\n\nvplot +\n  labs(title = \"Diagrama de volcán\") +\n  theme(plot.title = element_text(margin=margin(0,0,25,0)))"
  }
]