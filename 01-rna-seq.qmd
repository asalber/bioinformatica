---
title: Análisis de expresión génica diferencial (RNA-Seq)
lang: es
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE)
```

```{r, echo=F, warning=F, message=F}
library(tidyverse)
library(gt)
```

El análisis de la expresión génica diferencial (RNA-Seq) es una de las técnicas bioinformáticas que más auge ha experimentado en la última década, ya que permite cuantificar la expresión de un gen a nivel celular y comparar estas expresiones entre distintos grupos experimentales para identificar asociaciones entre genes y factores experimentales (como enfermedades o tratamientos).

El proceso de un análisis genético diferencial tiene distintas etapas, que van desde la obtención del las células a estudiar, pasando por la secuenciación del RNA que contienen, hasta el análisis estadístico de estas frecuencias para determinar el nivel de expresión de cada gen y la comparación entre los grupos experimentales.

![Etapas del análisis de expresión génica diferencial](img/rna-seq-workflow.png)

![](img/rna-seq-workflow-2.png)

En este tutorial nos centraremos en el análisis estadístico de las frecuencias de expresión de los genes, que normalmente requiere las siguientes etapas:

1.  Creación de la estructura de datos con las frecuencias de expresión génica.

1.  Preprocesamiento de datos.

1.  Análisis exploratorio de los datos.

1.  Análisis de expresión génica diferencial.

1.  Visualización de resultados.


Existen multitud de paquetes en el repositorio Bioconductor para realizar el análisis de expresión génica diferencial. En este tutorial veremos dos de los más usados: `EdgeR` y `DesSeq2`.

## Análisis de expresión génica diferencial con `edgeR`

El paquete [`edgeR`](https://bioconductor.org/packages/release/bioc/html/edgeR.html) es uno de los principales paquetes usados para el análisis de expresión génica diferencial que incorpora funciones para todas las etapas del análisis estadístico. Está disponible en el repositorio [Bioconductor](https://bioconductor.org/).

A continuación se explica cómo realizar las distintas etapas del análisis estadístico con este paquete.

### Estructura de datos

El análisis estadístico comienza siempre a partir de la matriz con las frecuencias o conteos de expresión de cada gen en el conjunto de muestras analizadas. Las filas de esta matriz corresponden a los genes observados y las columnas a las muestras analizadas.

:::{#exm-matriz-frecuencias-expresion-genes}
A continuación se muestran las primeras filas de una matriz de frecuencias de expresión génica. Cada casilla recoge el número de veces que el gen de la fila correspondiente se ha observado en la muestra de la columna correspondiente. 

```{r, echo = F}
library(DEFormats)
set.seed(123)
frec <- as.data.frame(simulateRnaSeqData())
gt(head(frec), rownames_to_stub = T)  |> 
tab_stubhead(label = "Gen")  |> 
tab_spanner(label = "Muestras", columns = everything())
```
:::

El paquete `edgeR` utiliza la estructura de datos `DGEList` para guardar la matriz de frecuencias de expresión génica. Para crear esta estructura se utiliza la función

- `DGEList(frec, group = grupo)`: Crea una estructura del tipo `DGEList` con la matriz de frecuencias de expresión génica `frec` (con genes en filas y muestras en columnas) y el vector `grupo` con los grupos experimentales a los que pertenecen las muestras analizadas en las columnas de la matriz de frecuencias.

```{r}
library(edgeR)
library(DEFormats)
frec <- simulateRnaSeqData()
grupo <- rep(c("A", "B"), each = 3)
dge <- DGEList(frec, group = grupo)
dge
```

Esta estructura de datos es una lista con dos atributos. El atributo `counts` contiene la matriz de frecuencias de expresión génica, y el atributo `samples` es un data frame con información sobre las muestras estudiadas. Cada fila de este data frame se corresponde con una columna de la matriz de frecuencias y contiene las siguientes columnas 

|Columna | Descripción |
|:-|:-|
| `group` | Grupo experimental al que pertenece la muestra. |
| `lib.size` | tamaño de la librería (suma de frecuencias de la muestra). | 
| `norm.factors` | Factor de normalización. |  

La estructura de datos `DGEList` puede contener opcionalmente el atributo `genes` con anotaciones de los genes observados en las filas de la matriz de frecuencias.


:::{#exm-edgeR-estructura-datos}
Veamos cómo crear la estructura de datos correspondiente al estudio de [Sheridan JM, et al. (2015)](https://bmccancer.biomedcentral.com/articles/10.1186/s12885-015-1187-z) donde se obtuvieron datos de tres poblaciones de células (basal, progenitor luminal (LP) y luminal maduro (ML)) seleccionadas de las glándulas mamarias de ratones vírgenes hembra, cada una por triplicado.
Los datos pueden obtenerse del repositorio [Gene Expression Omnibus (GEO)](http://www.ncbi.nlm.nih.gov/geo/) mediante el identificador GSE63310.

En primer lugar cargamos la matriz de frecuencias.

<!-- 
```{r}
# Descarga de datos
url <- "https://www.ncbi.nlm.nih.gov/geo/download/?acc=GSE63310&format=file"
utils::download.file(url, destfile="datos/GSE63310_RAW.tar", mode="wb") 
utils::untar("datos/GSE63310_RAW.tar", exdir = "datos")
files <- paste0("datos/", c("GSM1545535_10_6_5_11.txt", "GSM1545536_9_6_5_11.txt", "GSM1545538_purep53.txt", "GSM1545539_JMS8-2.txt", "GSM1545540_JMS8-3.txt", "GSM1545541_JMS8-4.txt", "GSM1545542_JMS8-5.txt", "GSM1545544_JMS9-P7c.txt", "GSM1545545_JMS9-P8c.txt"))
``` 
-->

```{r}
frecuencias <- read.csv("datos/matriz-frecuencias-genes.csv", row.names = 1)
head(frecuencias)
```

Después cargamos los datos de las muestras con los factores experimentales.

```{r}
muestras <- read.csv("datos/muestras.csv")
muestras
```

A continuación creamos la estructura de datos `DGEList`.

```{r}
# Creación de la estructura de datos DGEList.
dge <- DGEList(counts = frecuencias, group = muestras$Grupo)
# Añadimos también el Lote al dafa frame de las muestras.
dge$samples$Lote <- muestras$Lote
dge
```

A continuación anotamos los genes de las filas de la matriz de frecuencias. Para ello debe utilizarse un paquete específico para el genoma de la especie de donde proviene el RNA (`Mus.muculus` en este caso para el genoma del ratón).

```{r, message = F}
library(Mus.musculus)
geneid <- rownames(dge)
genes <- select(Mus.musculus, keys = geneid, columns = c("SYMBOL", "TXCHROM"), keytype = "ENTREZID")
# Eliminamos duplicidad de algunos genes
genes <- genes[!duplicated(genes$ENTREZID),]
dge$genes <- genes
dge
```
:::

### Preprocesamiento

Una vez preparada la estructura de datos, el siguiente paso es el preprocesamiento de datos. Normalmente comprende las siguientes tareas:

a. Normalización de las frecuencias.
a. Eliminación de los genes con poca expresión.
a. Normalización de las distribuciones de frecuencias de expresión génicas.

#### Normalización de las frecuencias

El objetivo principal es normalizar las frecuencias de expresión génica para eliminar el efecto sobre las frecuencias de factores como la profundidad de secuenciado (a mayor profundidad de secuenciado mayores frecuencias) o el tamaño de los genes (a mayor tamaño mayores frecuencias). Generalmente se usan las siguientes transformaciones

- Frecuencias por millón (CPM). Se divide cada frecuencia por el tamaño en millones de la librería de la muestra a la que pertenece. Se realiza con la función `cpm(dge)`.

- Logaritmo en base 2 de las frecuencias por millón (log2-CPM). Se calcula a partir de la anterior mediante la fórmula $\log_2(CPM+\frac{2}{L})$, donde $L$ es la longitud media de las librerías en millones. El término $\frac{2}{L}$ que se añade permite calcular el logaritmo para frecuencias nulas (ya que el logaritmo de 0 no existe). Se realiza con la función `cmp(dge, log = TRUE)`. 

- Lecturas por kilobase de transcripción por millón (RPKM): Se realiza con la función `rpkm(dge, longitud_genes)` pasando la longitud de los genes.

- Fragmentos por kilobase de transcripción por millón (FPKM).

Las dos primeras no tienen en cuenta el tamaño de los genes, pero suelen usarse para la expresión génica diferencial donde el tamaño de los genes se supone constante en las distintas muestras.

:::{#exm-edgeR-preprocesamiento}
Siguiendo con el ejemplo anterior, calculamos las frecuencias por millón y el logaritmo de las frecuencias por millón. 

```{r}
cpm <- cpm(dge)
summary(cpm)
lcpm <- cpm(dge, log = TRUE)
summary(lcpm)
```
:::

#### Eliminación de genes con poca expresión

Aunque el objetivo del análisis de la expresión génica diferencial es detectar los genes que se expresan en un grupo experimental en comparación con los otros, cuando un gen no se expresa en ninguna de las muestras no tiene interés para el estudio y puede eliminarse.

Existen diferentes criterios para eliminar los genes con poca expresión. El paquete `EdgeR` incorpora la siguiente función

- `filterByExpr(dge)`: Devuelve un vector de booleanos con nombres correspondientes a los genes de la estructura DEGList `dge`. Por defecto devuelve `TRUE` para cualquier gen con una frecuencia mayor o igual que 10 en al menos un número de muestras igual al del menor grupo experimental.

:::{#exm-edgeR-eliminacion-genes-poco-expresados}
Veamos cuántos genes no tienen expresión en ninguna muestra del ejemplo anterior.

```{r}
# Número de genes con expresión nula.
table(rowSums(dge$counts) == 0)  
```

El siguiente gráfico muestra la distribución del logaritmo en base 2 de las frecuencias por millón.

```{r}
# Definimos una función para dibujar la distribución del logaritmo de las frecuencias por millón.
dist_logcpm <- function(lcpm) {
lcpm |> 
    as.tibble()  |>
    pivot_longer(everything(), names_to = "Muestra", values_to = "LogCPM") |>
    ggplot(aes(x = LogCPM, color = Muestra)) +
    geom_density() +
    labs(title = "Distribución del logaritmo en base 2 de las frecuencias por millón")
}

dist_logcpm(lcpm)
```

Como se observa ha una porcentaje significativo de genes que tiene una expresión muy baja (valores negativos).

A continuación eliminamos de la estructura de datos los genes con poca expresión.

```{r}
filtro <- filterByExpr(dge)
dge <- dge[filtro, , keep.lib.sizes = F]
```

Y volvemos a dibujar la distribución del logaritmo en base 2 de las frecuencias por millón.

```{r}
lcpm <- cpm(dge, log = TRUE)
dist_logcpm(lcpm)
```
:::

Como se aprecia en el diagrama, el porcentaje de genes con baja expresión ha disminuido significativamente.


#### Normalización de las distribuciones de frecuencias de expresión génicas

Durante el proceso de secuenciación puede haber factores externos no biológicos que afecten a la expresión de los genes. Por ejemplo, la muestras del primer lote pueden tener mayores frecuencias que las del segundo lote. Como se supone que las muestras replicadas deben tener un rango y una distribución de frecuencias similares, en esta etapa se aplica otro procedimiento de normalización para garantizar que la distribución de frecuencias de cada muestra es similar. Para ello el paquete `edgeR` utiliza el [método de las medias recortadas de los valores M](https://pubmed.ncbi.nlm.nih.gov/20196867/) por medio de la función 

- `calcNormFactors(dge, method = "TMM")`: Calcular los factores de escalado del tamaño de las librerías de cada muestra. Estos factores se guardan automáticamente en el data frame con la información de las muestras `dge$samples`.

:::{#exm-edgeR-factores-escalado-tamaño-librerias}
Siguiendo con el mismo ejemplo, calculamos los factores de escalado para cada muestra.

```{r}
dge <- calcNormFactors(dge, method = "TMM")
dge$samples
```

A continuación se muestran los diagramas de cajas de las distribuciones normalizadas tras aplicar los factores de escalado.

```{r}
box_logcpm <- function(dge){
  muestras <- dge$samples
  muestras$Muestra <- row.names(muestras)
  cpm(dge, log = TRUE) |> 
    as.tibble() |>
    pivot_longer(everything(), names_to = "Muestra", values_to = "LogCPM") |>
    left_join(muestras, by = "Muestra") |> 
    ggplot(aes(x = Muestra, y = LogCPM, fill = group)) +
    geom_boxplot() +
    labs(title = "Distribución del logaritmo en base 2 de las frecuencias por millón")
}

box_logcpm(dge)
```

Como se puede apreciar, después de la normalización, todas las muestras presentan una distribución de frecuencias similar.
:::

### Análisis exploratorio

Una vez preprocesados los datos comienza el análisis estadístico propiamente dicho. En una primera fase se suele realizar un análisis exploratorio de los datos que suele incluir los siguientes análisis:

- Escalado multidimensional (análisis de componentes principales).


#### Escalado multidimensional

El escalado multidimensional mediante componente principales permite ver qué muestras son similares en cuando a la distribución de frecuencias de expresión génica. Los componentes principales son combinaciones lineales de los genes de la matriz de frecuencias que son ortogonales entre sí. El primer componente principal recoge la dimensión con mayor variabilidad de las frecuencias. El segundo recoge la dimensión don la mayor variabilidad no explicada por el primer componente principal y así sucesivamente. Normalmente los dos primeros componentes principales suelen recoger un porcentaje bastante alto de la variabilidad de las frecuencias. Al representar las muestras en estas dos dimensiones, las muestras más próximas entre sí, presentan una distribución de frecuencias de expresión génica similar. Para realizar esta representación se puede utilizar la siguiente función del paquete `limma`:

- `plotMDS(dge)`: Realiza un diagrama de componentes principales de la matriz de frecuencias de la estructura de datos `dge`. 

Alternativamente, se pueden calcular los componentes principales mediante la función `prcomp` del paquete `stats` y luego usar la función `autoplot` del paquete `ggfortify` para dibujar el diagrama de componentes principales.

:::{#exm-componentes-principales}
A continuación se muestra cómo obtener el diagrama de componentes principales de la matriz de frecuencias de nuestro ejemplo.

```{r}
plotMDS(dge, col = as.numeric(dge$samples$group), main = "Diagrama de componentes principales del logaritmo en base 2 de las frecuencias por millón")
```

```{r}
library(ggfortify)
autoplot(prcomp(t(lcpm)), data = dge$samples, color = "group", loadings = F, loadings.label = F) +
labs(title = "Diagrama de componentes principales del logaritmo en base 2 de las frecuencias por millón")
```

Como se puede apreciar las muestras de cada grupo experimental aparecen agrupadas. La mayor diferencia (a lo largo del primer componente principal) se da entre el grupo basal y los otros dos grupos. Esto indica que cuando se realice el análisis de expresión génica diferencial habrá bastantes genes con diferencias de expresión significativa entre el grupo basal y los otros dos, mientras que no habrá tantos al comparar los grupos LP y ML. 
:::

Otra opción muy interesante es el paquete `Glimma` que permite dibujar un diagrama de componentes principales interactivo mediante la función

- `glMDSPlot(lcpm)`: Dibuja un diagrama de componentes principales interactivo de la matriz de frecuencias `lcpm`.

:::{#exm-edgeR-glimma-componentes-princiaples}
A continuación se muestra cómo obtener el diagrama de componentes principales para nuestro ejemplo con el paquete `Glimma`.

```{r}
library(Glimma)
library(DESeq2)
#glMDSPlot(lcpm, groups = dge$samples[,c(2,5)])
dds <- DESeqDataSetFromMatrix(
  countData = dge$counts,
  colData = dge$samples,
  rowData = dge$genes,
  design = ~group
)
glimmaMDS(dds)
```
:::

### Análisis de expresión génica diferencial

La última etapa del análisis, y la más importante, es la detección de los genes con una expresión significativamente diferente entre los grupos experimentales. Para ello se suelen utilizar modelos lineales o modelos lineales generalizados. En general, la estimación de los parámetros del modelo ajustado depende de la distribución teórica usada para modelizar las frecuencias de expresión génica. El paquete `limma`, por ejemplo, realiza un ajuste de modelo lineal suponiendo que las distribuciones de las variables implicadas son normales, mientras que el paquete `edgeR` modeliza las frecuencias de expresión de los genes observadas mediante la distribución binomial negativa, que es mucho más realista.

En general en las distribuciones de frecuencias de expresión génica, se ha observado que la varianza no es independiente de la media. Los métodos que modelizan las frecuencias mediante el modelo binomial negativo asumen una relación cuadrática entre la varianza y media. 

El siguiente paso es estimar la dispersión de las frecuencias de expresión génica para cada gen. Para ello `edgeR` utiliza el método de la máxima verosimilitud condicionada y ajustada por percentiles, mediante la función

- `estimateDisp(dge, diseño)`: Realiza una estimación de la dispersión de las frecuencias de expresión génica contenidas en la estructura del tipo DGEList dad en `dge`, de acuerdo al diseño experimental dado en `diseño`.

:::{#exm-edgeR-estimacion-dispersion}
```{r}
dge <- estimateDisp(dge)
```
:::

Una vez ajustado el modelo Binomial Negativo y estimada la dispersión, solo queda aplicar el contraste de comparación de la expresión génica diferencial entre los grupos experimentales. Para ello `edgeR` utiliza el test exacto similar al test exacto de Fisher, pero adaptado a la distribución Binomial Negativa. Para ello se usa la función

- `exacTest(dge, pair=grupos)`: Realiza el contraste de comparación de la expresión génica a partir del las frecuencias de aparción de genes contenidas en la estructura del tipo DGEList dada en `dge`, entre los grupos experimentales dados en el vector `grupos` (solo puede contener dos grupos).

:::{#exm-edgeR-contraste-pares-exacto}
En nuestro ejemplo realizamos tres contrastes para todos los posibles pares de grupos experimentales.

```{r}
exact_B_LP <- exactTest(dge, pair= c("Basal", "LP"))
exact_B_ML <- exactTest(dge, pair= c("Basal", "ML"))
exact_LP_ML <- exactTest(dge, pair= c("LP", "ML"))
```
:::

Tras realizar el contraste se puede utilizar la siguiente función para obtener un resumen con el número de genes subrexpresados y sobrexpresados significativamente.

- `summary(decideTests(test))`: Devuelve una tabla con los genes subexpresados, sobreexpresados significativamente, así como lo que no presentan cambios significativos a partir de los resultados del contraste `test`.

Finalmente, para ver los genes con diferencias de expresión más estadísticamente significativas se puede utilizar la función 

- `topTags(test)`: Devuelve un data frame con los genes con diferencias de expresión estadísticamente más significativas entre los grupos experimentales comparados en objeto de resultados del contraste `test`.

:::{#exm-edgeR-genes-mayor-diferencia}
Resumen con los genes subexpresados y sobreexpresados significativamente entre el grupo Basal y LP.

```{r}
summary(decideTests(exact_B_LP))
```

Genes con diferencias más significativas entre el grupo Basal y el grupo LP.

```{r}
as.data.frame(topTags(exact_B_LP))  |> 
  gt(rownames_to_stub = T, caption = "Genes más subexpresados o sobreexpresados signiticativamente")  |> 
  tab_stubhead(label = "Gen")
```

Resumen con los genes subexpresados y sobreexpresados significativamente entre el grupo Basal y ML.

```{r}
summary(decideTests(exact_B_ML))
```

Genes con diferencias más significativas entre el grupo Basal y el grupo ML.

```{r}
as.data.frame(topTags(exact_B_ML))  |> 
  gt(rownames_to_stub = T, caption = "Genes más subexpresados o sobreexpresados signiticativamente")  |> 
  tab_stubhead(label = "Gen")
```

Resumen con los genes subexpresados y sobreexpresados significativamente entre el grupo LP y ML.

```{r}
summary(decideTests(exact_LP_ML))
```

Genes con diferencias más significativas entre el grupo LP y el grupo ML.

```{r}
as.data.frame(topTags(exact_LP_ML))  |> 
  gt(rownames_to_stub = T, caption = "Genes más subexpresados o sobreexpresados signiticativamente")  |> 
  tab_stubhead(label = "Gen")
```
:::

Otra alternativa, para diseños experimentales que incluye más de un factor, es usar modelos lineales generalizados (GLM). El primer paso es definir la matriz del diseño del experimento, que incluye las variables que definen grupos experimentales. Para ello se utiliza la función

- `model.matrix(formula-diseño)`: Construye una matriz con el diseño experimental de acuerdo a la fórmula dada en `formula-diseño`. Esta fórmula es similar a la fórmula que que utiliza en un ANOVA para definir el diseño experimental, donde las variables se añaden con el operador `+`, y se hacen interactuar con el operador `*`.

:::{#exm-edgeR-diseño-experimental}
Continuando con el mismo ejemplo, definimos la matriz de diseño del modelo.

```{r}
diseño <- model.matrix(~ 0 + dge$samples$group + dge$samples$Lote)
colnames(diseño) <- gsub("dge\\$samples\\$group", "", colnames(diseño))
colnames(diseño) <- gsub("dge\\$samples\\$", "", colnames(diseño))
diseño
```
:::

Al igual que antes, antes de realizar el contraste hay que estimar la dispersión conjunta y para cada gen, pero ahora hay que introducir el diseño como un parámetro de la función `estimateDisp`.

:::{#exm-edgeR-diseño-experimental}
Realizamos la estimación de la dispersión para nuestro ejemplo.

```{r}
dge <- estimateDisp(dge, diseño)
```
:::

Una vez estimada la dispersión y ajustados los modelos generalizados binomiales negativos, ya se puede realizar el contraste de comparación de expresión génica. Para ello se utilizan las siguientes funciones

- `glmQLFit(dge, diseño)`: Realiza el ajuste del modelo generalizado de comparación de expresión génica mediante el test F de cuasi verosimilitud, con las frecuencias de expresión de la estructura del tipo DGEList dada en `dge` y de acuerdo al diseño experimental indicado en `diseño`.

- `makeContrast(grupo1 - grupo2, levels=diseño)`: Define los grupos `grupo1` y `grupo2` a comparar en el contraste pares para la diferencia en la expresión génica.

- `glmQLFTest(modelo-ajustado, contrast=contraste)`. Realiza el contraste de comparación por pares a partir del modelo ajustado `modelo-ajustado`. El modelo ajustado tiene varios coeficientes dependiendo del número grupos experimentales, el primero corresponde al ajuste base para el grupo control, y los sucesivos a las diferencias de los otros grupos experimentales con el control.

- `glmTreat(modelo-ajustado, contrast=contraste, lfc = n)`. Realiza el contraste de comparación por pares similar al de la función anterior, pero descartando los genes con un logaritmo en base dos de la razón de cambio (logFC) menor que el valor dado en el parámetro `lfc`. 

:::{#exm-edgeR-ajuste-modelo-lineal-generalizado}
Realizamos el ajuste del modelo linear generalizado para nuestro ejemplo.

```{r}
modelo <- glmQLFit(dge, diseño)
```

Y, a continuación, los contrastes por pares. En primer lugar, comparamos Basal con LP y mostramos los genes más diferenciados.

```{r}
contraste <- makeContrasts(Basal - LP, levels = diseño) 
glmQL_B_LP <- glmQLFTest(modelo, contrast = contraste)
summary(decideTests(glmQL_B_LP))
as.data.frame(topTags(glmQL_B_LP))  |> 
  gt(rownames_to_stub = T, caption = "Genes más subexpresados o sobreexpresados signiticativamente")  |> 
  tab_stubhead(label = "Gen")
```

A continuación comparamos Basal con ML.

```{r}
contraste <- makeContrasts(Basal - ML, levels = diseño) 
glmQL_B_ML <- glmQLFTest(modelo, contrast = contraste)
summary(decideTests(glmQL_B_ML))
as.data.frame(topTags(glmQL_B_ML))  |> 
  gt(rownames_to_stub = T, caption = "Genes más subexpresados o sobreexpresados signiticativamente")  |> 
  tab_stubhead(label = "Gen")
```

Y ahora comparamos LP con ML.

```{r}
contraste <- makeContrasts(LP - ML, levels = diseño) 
glmQL_LP_ML <- glmQLFTest(modelo, contrast = contraste)
summary(decideTests(glmQL_LP_ML))
as.data.frame(topTags(glmQL_LP_ML))  |> 
  gt(rownames_to_stub = T, caption = "Genes más subexpresados o sobreexpresados signiticativamente")  |> 
  tab_stubhead(label = "Gen")
```

Por último buscamos los genes con una expresión diferente en los tres grupos experimentales.

```{r}
glmQL_all <- glmQLFTest(modelo, coef = 2:3)
as.data.frame(topTags(glmQL_all))  |> 
  gt(rownames_to_stub = T, caption = "Genes más subexpresados o sobreexpresados signiticativamente")  |> 
  tab_stubhead(label = "Gen")
```
:::

### Visualización de resultados

Existen diferentes diagramas para representar los resultados del análisis génico diferencial. En esta sección presentamos dos de los diagramas más utilizados, el diagrama MD y el diagrama de volcán. 

#### Diagrama MD

Este diagrama consiste en un mapa de puntos donde cada punto corresponde a un gen. El eje X representa la media del logaritmo de las frecuencias por millón (lcpm) y el eje Y representa el logaritmo en base 2 de la razón de cambio (logFC). Habitualmente, los genes subexpresados significativamente se dibujan en color azul, mientras que los sobreexpresados se dibujan en color rojo.

Para dibujar un diagrama MD con `edgeR` se utiliza la función 

- `plotMD(contraste)`: Dibuja un diagrama MD a partir de los resultados del contraste de comparación de expresión génica dado en `contraste`.

:::{#exm-edgeR-ajuste-modelo-lineal-generalizado}
Dibujamos primero el diagrama MD para la comparación de los grupos Basal y LP.

```{r}
plotMD(glmQL_B_LP)
```

A continuación para la comparación de los grupos Basal y ML.

```{r}
plotMD(glmQL_B_ML)
```

Y finalmente para la comparación de los grupos LP y ML.

```{r}
plotMD(glmQL_LP_ML)
```
:::

#### Diagrama de volcán

Un diagrama de volcán es una representación gráfica utilizada en Bioinformática para visualizar los resultados del análisis de expresión génica diferencial u otros tipos de análisis de datos ómicos de alto rendimiento, como Proteómica o Metabolómica.

En un diagrama de volcán, cada punto de datos representa un gen (o una proteína/metabolito) del conjunto de datos. El eje x muestra el cambio logarítmico o tamaño del efecto, que mide la magnitud del cambio en la expresión entre dos condiciones (por ejemplo, tratamiento vs. control). El eje y muestra la significación estadística, a menudo representada como el logaritmo negativo del valor p. Un valor p más pequeño indica una mayor significación estadística.

A menudo, los puntos en el gráfico de volcán están coloreados o resaltados según su significación estadística y cambio en la expresión. Por lo general, los genes significativamente sobreexpresados se representan en rojo, los genes significativamente subexpresados en azul y los genes no significativamente expresados en gris o negro. Cuanto más significativos sean estadísticamente y mayor sea el cambio en la expresión, más alejados estarán los puntos del centro del gráfico.

`edgR` no incorpora una función para realizar este tipo de diagramas, así que utilizaremos la siguiente función del paquete `Glimma`

- `glimmaVolcano(contraste, dge = dge)`: Realiza diagrama de volcán del contraste de comparación de expresión génica dado en `contraste`, realizado sobre la estructura de datos del tipo `DGEList` dada en `dge`.

En el capítulo Diagramas de Volcán se explica con más detalle su creación con el paquete `ggplot2`.

:::{#exm-edgeR-ajuste-modelo-lineal-generalizado}
Dibujamos primero el diagrama de volcán para la comparación de los grupos Basal y LP.

```{r}
library(Glimma)
glimmaVolcano(glmQL_B_LP, dge = dge)
```

A continuación para la comparación de los grupos Basal y ML.

```{r}
library(Glimma)
glimmaVolcano(glmQL_B_ML, dge = dge)
```

Y finalmente para la comparación de los grupos LP y ML.

```{r}
library(Glimma)
glimmaVolcano(glmQL_LP_ML, dge = dge)
```
:::


## Análisis de expresión génica diferencial con `DESeq2`

El paquete [`DESeq2`](https://bioconductor.org/packages/release/bioc/html/DESeq2.html) es otro de los paquetes más utilizados para el análisis de la expresión génica diferencial, que al igual que `edgeR` incorpora procedimientos para todas las etapas del análisis. También está disponible en el repositorio [Bioconductor](https://bioconductor.org/).

### Estructura de Datos

El paquete `DESeq2` utiliza la estructura de datos `DESeqDataSet` para guardar la matriz de frecuencias de expresión génica. Esta estructura se deriva, a su vez, de la estructura `SingleCellExperiment`, que además de la matriz de frecuencias de expresión de los genes incluye también los grupos experimentales a los que pertenecen las muestras estudiadas y otra información que se va generando a medida que progresa el análisis.

![El objeto `SingleCellExperiment`](img/SingleCellExperiment.png)

El paquete [`SingleCellExperiment`](https://www.bioconductor.org/packages/release/bioc/html/SingleCellExperiment.html) de Bioconductor define esta estructura de datos, y puede instalarse mediante el siguiente código

```r
BiocManager::install('SingleCellExperiment')
```

Para crear la estructura de datos `DESeqDataSet` se utiliza la siguiente función

- `DESeqDataSetFromMatrix(countData = frec, colData = grupo, design = diseño)`: Crea una estructura del tipo `DESeqDataSet` con la matriz de frecuencias de expresión génica `frec` (con genes en filas y muestras en columnas), y el data frame `grupo` con los grupos experimentales a los que pertenecen las muestras analizadas en las columnas de la matriz de frecuencias y la columna `diseño` del data frame `grupo` que contiene los grupos experimentales a comparar.

:::{#exm-deseq2-carga-datos}
Siguiendo con el mismo ejemplo de la sección anterior, podemos aprovechar la estructura de datos `DGEList` creada durante el análisis génico diferencial con el paquete `edgeR` para crear a partir de ella la estructura de datos `DESeqDataSet` que requiere el paquete `DESeq2`.

```{r, message = F}
library(DESeq2)
dds <- DESeqDataSetFromMatrix(
  countData = frecuencias,
  colData = muestras,
  rowData = genes,
  design = ~ Grupo
)
dds
```
:::

Si disponemos de los datos en el formato de la estructura de datos `DGEList`, es fácil convertirlos al formato de la estructura de datos `DESeqDataSet` mediante la función `as.DESeqDataSet` del paquete `DEFormats`.

- `as.DESeqDataSet(dge)`: Devuelve una estructura de datos del tipo `DESeqDataSet` con los datos de la estructura de datos `DGEList` dada en `dge`.

:::{#exm-deseq2-carga-datos2}
```r
library(DEFormats)
dds <- as.DESeqDataSet(dge)
```
:::

Una vez creada la estructura de datos, podemos acceder a la información que contiene con las siguientes funciones:

- `counts(dds)`: Devuelve un data frame con las frecuencias de expresión génica de la estructura de datos en formato `DESEqDataSet` dada en `dds`.
  
- `colData(dds)`: Devuelve un data frame con la información de las muestras (columnas) de la estructura de datos en formato `DESEqDataSet` dada en `dds`.

- `rowData(dds)`: Devuelve un data frame con la información de los genes (filas) de la estructura de datos en formato `DESEqDataSet` dada en `dds`.

- `design(dds)`: Devuelve la fórmula del diseño experimental de la estructura de datos en formato `DESEqDataSet` dada en `dds`.

:::{#exm-deseq2-datos-muestras-genes}
Para comprobar que se creado bien la estructura de datos, mostramos la información que contiene. Primero la matriz de frecuencias de expresión génica.

```{r}
head(counts(dds))
```

Después, la información de las muestras del ejemplo.

```{r}
colData(dds)
```

A continuación, mostramos la información de los genes.

```{r}
rowData(dds)
```

Y finalmente mostramos el diseño.

```{r}
design(dds)
```
:::

### Preprocesamiento

El paquete `DESeq2` realiza el preprocesamiento de maneare automática cuando se lanza el procedimiento para el análisis de expresión génica diferencial.

### Análisis exploratorio

### Escalado multidimensional 

Al igual que antes, el principal análisis exploratorio es el escalado multidimensional. Para realizarlo podemos usar de nuevo la siguiente función del paquete `Glimma`.

- `glimmaMDS(dds)`: Realiza un diagrama interactivo de componenetes principales a partir de la estructura de datos `dds`.

:::{#exm-DESeq2-glimma-componentes-princiaples}
A continuación se muestra cómo obtener el diagrama de componentes principales para nuestro ejemplo con el paquete `Glimma`.

```{r}
library(Glimma)
glimmaMDS(dds)
```
:::

### Análisis de expresión génica diferencial

Para realizar el análisis de expresión génica diferencial el paquete `DESeq2` utiliza la siguiente función

- `DESeq(dds)`: Realiza el preprocesamiento de datos y el ajuste del modelo para el análisis de expresión génica diferencial de la estructura de datos en formato `DESeqDataSet` dada en `dds`.

Antes de proceder con el análisis es importante definir la categoría de referencia (grupo control) como el primer nivel del principal factor experimental. Ya que el cálculo de los estadísticos como el logaritmo en base 2 de la razón de cambio (logFC) se realizará con respecto a esta categoría. 

Para visualizar los resultados de análisis de expresión génica diferencial se utilizan las funciones

- `results(dds, contrast = c(factor, grupo1, grupo2), alpha = 0.05)`: Muestra una tabla con los principales estadísticos del contraste de comparación de expresión génica del `grupo2` frente al `grupo1` del factor experimental dado en `factor`, realizado a partir de la estructura de datos en formato `DESeqDataSet` dada en `dds`. Si no se indica el parámetro `contrast`, por defecto se muestra el resultado del contraste de comparación del último nivel del factor experimental frente al primero. El parámetro `alpha` indica el nivel de significación del contraste, des decir, probabilidad por debajo de la cuál se considera significativo el p-valor ajustado.

- `summary(contraste)`: Devuelve un resumen con los genes subexpresados y sobreexpresados significativamente a partir de los resultados del contraste de comparación de expresión génica dados en `contraste`.


:::{#exm-DESeq2-analisis-expresion-genica-diferencial}
Siguiendo con nuestro ejemplo, primero definiremos el grupo Basal como la primera categoría del factor `group`.

```{r}
dds$Grupo <- relevel(dds$Grupo, "Basal")
```

A continuación ya podemos realizar el análisis de expresión génica diferencial para nuestro ejemplo.

```{r}
dds <- DESeq(dds)
dds
```

A continuación, mostramos los resultados para la comparación del grupo Basal con el grupo LP.

```{r}
res_B_LP <- results(dds, contrast = c("Grupo", "Basal", "LP"))
# Resumen de genes subexpresados y sobreexpresados.
summary(res_B_LP)
# Genes subexpresados significativamente ordenados de menor a mayor logFC.
as.data.frame(res_B_LP)  |> 
  filter(log2FoldChange < 0 & padj < 0.05) |>
  arrange(log2FoldChange)  |> 
  head(10) |> 
  gt(rownames_to_stub = T, caption = "10 genes más subexpresados signiticativamente")  |> 
  tab_stubhead(label = "Gen")
# Genes sobrexpresados significativamente ordenados de mayor a menor logFC.
as.data.frame(res_B_LP)  |> 
  filter(log2FoldChange > 0 & padj < 0.05) |>
  arrange(desc(log2FoldChange))  |> 
  head(10) |> 
  gt(rownames_to_stub = T, caption = "10 genes más sobreexpresados signiticativamente")   |> 
  tab_stubhead(label = "Gen")
```

Después, mostramos los resultados para la comparación del grupo Basal con el grupo ML.

```{r}
res_B_ML <- results(dds, contrast = c("Grupo", "Basal", "ML"))
# Resumen de genes subexpresados y sobreexpresados.
summary(res_B_ML)
# Genes subexpresados significativamente ordenados de menor a mayor logFC.
as.data.frame(res_B_LP)  |> 
  filter(log2FoldChange < 0 & padj < 0.05) |>
  arrange(log2FoldChange)  |> 
  head(10) |> 
  gt(rownames_to_stub = T, caption = "10 genes más subexpresados signiticativamente")  |> 
  tab_stubhead(label = "Gen")
# Genes sobrexpresados significativamente ordenados de mayor a menor logFC.
as.data.frame(res_B_LP)  |> 
  filter(log2FoldChange > 0 & padj < 0.05) |>
  arrange(desc(log2FoldChange))  |> 
  head(10) |> 
  gt(rownames_to_stub = T, caption = "10 genes más sobreexpresados signiticativamente") |> 
  tab_stubhead(label = "Gen")
```

Y finalmente mostramos los resultados para la comparación del grupo LP con el grupo ML.

```{r}
res_LP_ML <- results(dds, contrast = c("Grupo", "LP", "ML"))
# Resumen de genes subexpresados y sobreexpresados.
summary(res_LP_ML)
# Genes subexpresados significativamente ordenados de menor a mayor logFC.
as.data.frame(res_LP_ML)  |> 
  filter(log2FoldChange < 0 & padj < 0.05) |>
  arrange(log2FoldChange)  |> 
  head(10) |> 
  gt(rownames_to_stub = T, caption = "10 genes más subexpresados signiticativamente")  |> 
  tab_stubhead(label = "Gen")
# Genes sobrexpresados significativamente ordenados de mayor a menor logFC.
as.data.frame(res_LP_ML)  |> 
  filter(log2FoldChange > 0 & padj < 0.05) |>
  arrange(desc(log2FoldChange))  |> 
  head(10) |> 
  gt(rownames_to_stub = T, caption = "10 genes más sobreexpresados signiticativamente") |> 
  tab_stubhead(label = "Gen")
```
:::

### Visualización de datos

#### Diagrama MD

Este diagrama consiste en un mapa de puntos donde cada punto corresponde a un gen. El eje X representa la media del logaritmo de las frecuencias por millón (lcpm) y el eje Y representa el logaritmo en base 2 de la razón de cambio (logFC). Habitualmente, los genes subexpresados significativamente se dibujan en color azul, mientras que los sobreexpresados se dibujan en color rojo.

`DESeq2` no incorpora una función para realizar este tipo de diagramas, así que utilizaremos la siguiente función del paquete `Glimma`

- `glimmaMA(dds, groups = factor)`: Realiza diagrama MD del contraste de comparación de expresión génica realizado sobre la estructura de datos del tipo `DESeqDataSet` dada en `dds`, con los grupos experimentales definidos en `factor`. 

:::{.callout-warning}
La función `glimmaMA` muestra el diagrama de comparación para la comparación del último nivel del factor experimental con el primero. Si tenemos más de dos grupos experimentales hay que filtrar previamente la estructura de datos en formato `DESeqDataSet` para que solo incluya los dos grupos a comparar.
:::

:::{#exm-DESeq2-diagrama-MA}
```{r}
glimmaMA(dds, groups = dds$Grupo)
```
:::

#### Diagrama de volcán

Un diagrama de volcán es una representación gráfica utilizada en Bioinformática para visualizar los resultados del análisis de expresión génica diferencial u otros tipos de análisis de datos ómicos de alto rendimiento, como Proteómica o Metabolómica.

En un diagrama de volcán, cada punto de datos representa un gen (o una proteína/metabolito) del conjunto de datos. El eje x muestra el cambio logarítmico o tamaño del efecto, que mide la magnitud del cambio en la expresión entre dos condiciones (por ejemplo, tratamiento vs. control). El eje y muestra la significación estadística, a menudo representada como el logaritmo negativo del valor p. Un valor p más pequeño indica una mayor significación estadística.

A menudo, los puntos en el gráfico de volcán están coloreados o resaltados según su significación estadística y cambio en la expresión. Por lo general, los genes significativamente sobreexpresados se representan en rojo, los genes significativamente subexpresados en azul y los genes no significativamente expresados en gris o negro. Cuanto más significativos sean estadísticamente y mayor sea el cambio en la expresión, más alejados estarán los puntos del centro del gráfico.

`DESeq2` no incorpora una función para realizar este tipo de diagramas, pero podemos usar la siguiente función del paquete `Glimma`

- `glimmaVolcano(dds, groups = factor)`: Realiza diagrama de volcán del contraste de comparación de expresión génica realizado sobre la estructura de datos del tipo `DESeqDataSet` dada en `dds`, con los grupos experimentales definidos en `factor`. 

:::{.callout-warning}
La función `glimmaVolcano` muestra el diagrama de comparación para la comparación del último nivel del factor experimental con el primero. Si tenemos más de dos grupos experimentales hay que filtrar previamente la estructura de datos en formato `DESeqDataSet` para que solo incluya los dos grupos a comparar.
:::

En el capítulo Diagramas de Volcán se explica con más detalle su creación con el paquete `ggplot2`.

:::{#exm-DESeq2-diagrama-volcan}
Dibujamos el diagrama de volcán interactivo.

```{r}
glimmaVolcano(dds, groups = dds$Grupo)
```

Obsérvese que este diagrama solo muestra la comparación del último grupo experimental (ML) con respecto al grupo de referencia (Basal). 

A continuación creamos los diagrams de volcán para todos los contrastes por pares, mediante el paquete `ggplot`. En primer lugar para la comparación de LP frente a Basal.

```{r funcion-digrama-volcan}
# Crear nueva columna con categorías de expresión génica.
diagramaVolcan <- function(contraste, alpha = 0.05, minlogFC = 2){
  colores <- c("dodgerblue3", "gray50", "firebrick3")
  df <- as.data.frame(contraste)  |> na.omit()
  rangex <- max(-min(df$log2FoldChange, na.rm = T), max(df$log2FoldChange, na.rm = T))
  maxy <- max(-log10(df$padj), na.rm = T)
  vplot <- df |>
      mutate(Expresión = case_when(
          log2FoldChange >= log2(minlogFC) & padj <= alpha ~ "Up", 
          log2FoldChange <= log2(1/minlogFC) & padj <= alpha ~ "Down",
          TRUE ~ "NC"))  |> 
  # Definimos los colores para los genes subexpresados, normales y sobreexpresados.
    ggplot(aes(x = log2FoldChange, y = -log10(padj))) + 
    geom_point(aes(color = Expresión)) +
    scale_color_manual(values = colores) +
    # Añadimos las líneas de la razón de cambio.
    geom_vline(xintercept = c(log2(1/minlogFC), log2(minlogFC)), linetype = "dashed") +
    # Etiquetamos las líneas de la razón de cambio.
    annotate("text", x = log2(1/minlogFC), y = maxy, label = paste0("FC=1/", minlogFC), vjust = 0) +
    annotate("text", x = log2(2), y = maxy, label = paste0("FC=", minlogFC), vjust = 0) +
    # Añadimos las líneas de los p-valores.
    geom_hline(yintercept = -log10(alpha), linetype = "dashed") +
    # Etiquetamos las líneas de los p-valores.
    annotate("text", x = rangex+0.1, y = -log10(alpha), label = paste0("p=", alpha), hjust = 0) +
    theme(plot.margin = unit(c(2, 1, 1, 1), "lines")) +
    coord_cartesian(xlim = c(-rangex, rangex), ylim = c(0, maxy), expand = FALSE, clip = "off")
  return(vplot)
}
```

```{r}
diagramaVolcan(res_B_LP, alpha = 0.05, minlogFC = 2)
```

A continuación dibujamos el diagrama de volcán de ML frente a Basal.

```{r}
diagramaVolcan(res_B_ML, alpha = 0.05, minlogFC = 2)
```

Y finalmente el diagrama de volcán de ML frente a LP.

```{r}
diagramaVolcan(res_LP_ML, alpha = 0.05, minlogFC = 2)
```
:::


## Referencias

- Orchestrating Single-Cell Analysis with Bioconductor. (s. f.). Recuperado 12 de junio de 2023, de https://github.com/LTLA/OSCA

- Law, Charity, et al. [RNA-seq analysis is easy as 1-2-3 with limma, Glimma and edgeR](https://bioconductor.org/packages/release/workflows/vignettes/RNAseq123/inst/doc/limmaWorkflow.html).


